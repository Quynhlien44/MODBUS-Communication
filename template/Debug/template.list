
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f50  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08003090  08003090  00013090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d4  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  200001d4  080035c4  000201d4  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000210  080035c4  00020210  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000354e  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000008c5  00000000  00000000  0002374b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000208  00000000  00000000  00024010  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00024218  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000e21  00000000  00000000  000243d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000fce  00000000  00000000  000251f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000261c7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001020  00000000  00000000  00026244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08003078 	.word	0x08003078

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08003078 	.word	0x08003078

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f092 0f00 	teq	r2, #0
 800047a:	bf14      	ite	ne
 800047c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e720      	b.n	80002d4 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aedc 	beq.w	8000282 <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6c1      	b.n	8000282 <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <NVIC_EnableIRQ+0x2c>)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	095b      	lsrs	r3, r3, #5
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	f002 021f 	and.w	r2, r2, #31
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <SetSysClock>:
void SetSysClock(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000aea:	4a3d      	ldr	r2, [pc, #244]	; (8000be0 <SetSysClock+0x100>)
 8000aec:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <SetSysClock+0x100>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 8000af6:	bf00      	nop
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <SetSysClock+0x100>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f9      	beq.n	8000af8 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <SetSysClock+0x100>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <SetSysClock+0x36>
  {
    status = 1;
 8000b10:	2301      	movs	r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	e001      	b.n	8000b1a <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d10b      	bne.n	8000b38 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8000b20:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <SetSysClock+0x100>)
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <SetSysClock+0x100>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b2a:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000b2c:	4a2c      	ldr	r2, [pc, #176]	; (8000be0 <SetSysClock+0x100>)
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <SetSysClock+0x100>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 8000b36:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 8000b38:	4a2a      	ldr	r2, [pc, #168]	; (8000be4 <SetSysClock+0x104>)
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <SetSysClock+0x104>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 8000b44:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <SetSysClock+0x104>)
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <SetSysClock+0x104>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8000b50:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <SetSysClock+0x104>)
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <SetSysClock+0x104>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 8000b5c:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <SetSysClock+0x100>)
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <SetSysClock+0x100>)
 8000b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <SetSysClock+0x108>)
 8000b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b6e:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8000b70:	bf00      	nop
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <SetSysClock+0x108>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f9      	bne.n	8000b72 <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8000b7e:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <SetSysClock+0x100>)
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <SetSysClock+0x100>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b88:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <SetSysClock+0x100>)
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <SetSysClock+0x100>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b94:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <SetSysClock+0x100>)
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <SetSysClock+0x100>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ba0:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <SetSysClock+0x100>)
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <SetSysClock+0x100>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bac:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 8000bae:	bf00      	nop
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <SetSysClock+0x100>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f9      	beq.n	8000bb0 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <SetSysClock+0x100>)
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SetSysClock+0x100>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f043 0303 	orr.w	r3, r3, #3
 8000bc6:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000bc8:	bf00      	nop
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SetSysClock+0x100>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f9      	beq.n	8000bca <SetSysClock+0xea>
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40023c00 	.word	0x40023c00
 8000be8:	40007000 	.word	0x40007000

08000bec <main>:
unsigned short int CRC16(char *nData, unsigned short int wLength);
void respond_frame(int sensor_value);
void USART2_write_string(const char* str);
int read_sensor(int input_address);

int main(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf2:	b672      	cpsid	i
    __disable_irq();
    USART1_Init();
 8000bf4:	f000 f94a 	bl	8000e8c <USART1_Init>
    USART2_Init();
 8000bf8:	f000 f97e 	bl	8000ef8 <USART2_Init>
    SetSysClock();
 8000bfc:	f7ff ff70 	bl	8000ae0 <SetSysClock>
    SystemCoreClockUpdate();
 8000c00:	f000 fb3c 	bl	800127c <SystemCoreClockUpdate>

    USART2_write_string("Program started\r\n");
 8000c04:	4852      	ldr	r0, [pc, #328]	; (8000d50 <main+0x164>)
 8000c06:	f000 f9d9 	bl	8000fbc <USART2_write_string>

    USART1->CR1 |= 0x0020;  // Enable RX interrupt
 8000c0a:	4a52      	ldr	r2, [pc, #328]	; (8000d54 <main+0x168>)
 8000c0c:	4b51      	ldr	r3, [pc, #324]	; (8000d54 <main+0x168>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	f043 0320 	orr.w	r3, r3, #32
 8000c14:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(USART1_IRQn);
 8000c16:	2025      	movs	r0, #37	; 0x25
 8000c18:	f7ff ff4a 	bl	8000ab0 <NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c1c:	b662      	cpsie	i
    __enable_irq();

    RCC->AHBENR |= 1;  // GPIOA clock
 8000c1e:	4a4e      	ldr	r2, [pc, #312]	; (8000d58 <main+0x16c>)
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <main+0x16c>)
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	61d3      	str	r3, [r2, #28]
    GPIOA->MODER &= ~0x00000C00;  // Clear PA5
 8000c2a:	4a4c      	ldr	r2, [pc, #304]	; (8000d5c <main+0x170>)
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <main+0x170>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000c34:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x400;  // PA5 output
 8000c36:	4a49      	ldr	r2, [pc, #292]	; (8000d5c <main+0x170>)
 8000c38:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <main+0x170>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c40:	6013      	str	r3, [r2, #0]

    RCC->APB2ENR |= 0x00000200;  // ADC1 clock
 8000c42:	4a45      	ldr	r2, [pc, #276]	; (8000d58 <main+0x16c>)
 8000c44:	4b44      	ldr	r3, [pc, #272]	; (8000d58 <main+0x16c>)
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4c:	6213      	str	r3, [r2, #32]
    ADC1->SQR5 = 0;  // Channel 0
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <main+0x174>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1->CR2 = 0;  // Single conversion, right align
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <main+0x174>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    ADC1->SMPR3 = 7;  // 384 cycles
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <main+0x174>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	615a      	str	r2, [r3, #20]
    ADC1->CR1 &= ~0x03000000;  // 12-bit resolution
 8000c60:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <main+0x174>)
 8000c62:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <main+0x174>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c6a:	6053      	str	r3, [r2, #4]
    ADC1->CR2 |= 1;  // ADC on
 8000c6c:	4a3c      	ldr	r2, [pc, #240]	; (8000d60 <main+0x174>)
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <main+0x174>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6093      	str	r3, [r2, #8]

    while (1) {
        char buffer[20];
        sprintf(buffer, "mFlag: %d\r\n", mFlag);
 8000c78:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <main+0x178>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4938      	ldr	r1, [pc, #224]	; (8000d68 <main+0x17c>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fc7f 	bl	800158a <siprintf>
        USART2_write_string(buffer);
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f993 	bl	8000fbc <USART2_write_string>
        if (mFlag == 1) {
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <main+0x178>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d14c      	bne.n	8000d3a <main+0x14e>
            char received_frame[8];
            for (int i = 0; i < 8; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca4:	e00c      	b.n	8000cc0 <main+0xd4>
                received_frame[i] = rx_buffer[i];
 8000ca6:	4a31      	ldr	r2, [pc, #196]	; (8000d6c <main+0x180>)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	4413      	add	r3, r2
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2d9      	uxtb	r1, r3
 8000cb0:	463a      	mov	r2, r7
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	4413      	add	r3, r2
 8000cb6:	460a      	mov	r2, r1
 8000cb8:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 8; i++) {
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	ddef      	ble.n	8000ca6 <main+0xba>
            }
            USART2_write_string("Full frame received\r\n");
 8000cc6:	482a      	ldr	r0, [pc, #168]	; (8000d70 <main+0x184>)
 8000cc8:	f000 f978 	bl	8000fbc <USART2_write_string>
            unsigned short int crc = CRC16(received_frame, 6);
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2106      	movs	r1, #6
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f987 	bl	8000fe4 <CRC16>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	847b      	strh	r3, [r7, #34]	; 0x22
            char crc_high_byte = crc >> 8;
 8000cda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            char crc_low_byte = crc;
 8000ce4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ce6:	f887 3020 	strb.w	r3, [r7, #32]
            if ((received_frame[7] == crc_high_byte) && (received_frame[6] == crc_low_byte)) {
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d112      	bne.n	8000d1a <main+0x12e>
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d10d      	bne.n	8000d1a <main+0x12e>
                USART2_write_string("CRC check passed\r\n");
 8000cfe:	481d      	ldr	r0, [pc, #116]	; (8000d74 <main+0x188>)
 8000d00:	f000 f95c 	bl	8000fbc <USART2_write_string>
                if (received_frame[3] == INPUT_REGISTER) {
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10a      	bne.n	8000d20 <main+0x134>
                    int sensor_value = read_sensor(INPUT_REGISTER);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 f9be 	bl	800108c <read_sensor>
 8000d10:	61f8      	str	r0, [r7, #28]
                    respond_frame(sensor_value);
 8000d12:	69f8      	ldr	r0, [r7, #28]
 8000d14:	f000 f9dc 	bl	80010d0 <respond_frame>
                if (received_frame[3] == INPUT_REGISTER) {
 8000d18:	e002      	b.n	8000d20 <main+0x134>
                }
            } else {
                USART2_write_string("CRC check failed\r\n");
 8000d1a:	4817      	ldr	r0, [pc, #92]	; (8000d78 <main+0x18c>)
 8000d1c:	f000 f94e 	bl	8000fbc <USART2_write_string>
            }
            mFlag = 0;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <main+0x178>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
            rx_index = 0;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <main+0x190>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
            USART1->CR1 |= 0x0020;  // Re-enable RX interrupt
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <main+0x168>)
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <main+0x168>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	60d3      	str	r3, [r2, #12]
 8000d38:	e006      	b.n	8000d48 <main+0x15c>
        } else if (mFlag == 2) {
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <main+0x178>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d101      	bne.n	8000d48 <main+0x15c>
            wrong_slave_address();
 8000d44:	f000 f978 	bl	8001038 <wrong_slave_address>
        }
        delay_Ms(100);  // Slow down the loop for readability
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f000 f881 	bl	8000e50 <delay_Ms>
    while (1) {
 8000d4e:	e793      	b.n	8000c78 <main+0x8c>
 8000d50:	08003090 	.word	0x08003090
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40012400 	.word	0x40012400
 8000d64:	200001f4 	.word	0x200001f4
 8000d68:	080030a4 	.word	0x080030a4
 8000d6c:	20000204 	.word	0x20000204
 8000d70:	080030b0 	.word	0x080030b0
 8000d74:	080030c8 	.word	0x080030c8
 8000d78:	080030dc 	.word	0x080030dc
 8000d7c:	200001f0 	.word	0x200001f0

08000d80 <USART1_IRQHandler>:
    }
    return 0;
}

void USART1_IRQHandler(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
    if (USART1->SR & 0x0020) {
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <USART1_IRQHandler+0xb0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0320 	and.w	r3, r3, #32
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d04a      	beq.n	8000e28 <USART1_IRQHandler+0xa8>
        rx_buffer[rx_index] = USART1->DR;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <USART1_IRQHandler+0xb0>)
 8000d98:	6852      	ldr	r2, [r2, #4]
 8000d9a:	b2d1      	uxtb	r1, r2
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <USART1_IRQHandler+0xb8>)
 8000d9e:	54d1      	strb	r1, [r2, r3]
        char buffer[20];
        sprintf(buffer, "Received byte %d: 0x%02X\r\n", rx_index + 1, rx_buffer[rx_index]);
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1c59      	adds	r1, r3, #1
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <USART1_IRQHandler+0xb8>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	1d38      	adds	r0, r7, #4
 8000db2:	460a      	mov	r2, r1
 8000db4:	4921      	ldr	r1, [pc, #132]	; (8000e3c <USART1_IRQHandler+0xbc>)
 8000db6:	f000 fbe8 	bl	800158a <siprintf>
        USART2_write_string(buffer);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 f8fd 	bl	8000fbc <USART2_write_string>
        rx_index++;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000dca:	6013      	str	r3, [r2, #0]
        if (rx_index == 1 && rx_buffer[0] == SLAVE_ADDRESS) {
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d108      	bne.n	8000de6 <USART1_IRQHandler+0x66>
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <USART1_IRQHandler+0xb8>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d103      	bne.n	8000de6 <USART1_IRQHandler+0x66>
            USART2_write_string("Slave address match\r\n");
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <USART1_IRQHandler+0xc0>)
 8000de0:	f000 f8ec 	bl	8000fbc <USART2_write_string>
 8000de4:	e006      	b.n	8000df4 <USART1_IRQHandler+0x74>
        } else if (rx_index == 1) {
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <USART1_IRQHandler+0x74>
            USART2_write_string("Slave address mismatch\r\n");
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <USART1_IRQHandler+0xc4>)
 8000df0:	f000 f8e4 	bl	8000fbc <USART2_write_string>
        }
        if (rx_index == 8) {
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d115      	bne.n	8000e28 <USART1_IRQHandler+0xa8>
            mFlag = (rx_buffer[0] == SLAVE_ADDRESS) ? 1 : 2;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <USART1_IRQHandler+0xb8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <USART1_IRQHandler+0x8a>
 8000e06:	2201      	movs	r2, #1
 8000e08:	e000      	b.n	8000e0c <USART1_IRQHandler+0x8c>
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <USART1_IRQHandler+0xc8>)
 8000e0e:	701a      	strb	r2, [r3, #0]
            USART2_write_string("Setting mFlag\r\n");
 8000e10:	480e      	ldr	r0, [pc, #56]	; (8000e4c <USART1_IRQHandler+0xcc>)
 8000e12:	f000 f8d3 	bl	8000fbc <USART2_write_string>
            rx_index = 0;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <USART1_IRQHandler+0xb4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
            USART1->CR1 &= ~0x0020;  // Disable RX interrupt
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <USART1_IRQHandler+0xb0>)
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <USART1_IRQHandler+0xb0>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f023 0320 	bic.w	r3, r3, #32
 8000e26:	60d3      	str	r3, [r2, #12]
        }
    }
}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40013800 	.word	0x40013800
 8000e34:	200001f0 	.word	0x200001f0
 8000e38:	20000204 	.word	0x20000204
 8000e3c:	080030f0 	.word	0x080030f0
 8000e40:	0800310c 	.word	0x0800310c
 8000e44:	08003124 	.word	0x08003124
 8000e48:	200001f4 	.word	0x200001f4
 8000e4c:	08003140 	.word	0x08003140

08000e50 <delay_Ms>:

void delay_Ms(int delay) {
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    int i = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
    for (; delay > 0; delay--)
 8000e5c:	e00d      	b.n	8000e7a <delay_Ms+0x2a>
        for (i = 0; i < 2460; i++);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e002      	b.n	8000e6a <delay_Ms+0x1a>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	3301      	adds	r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f640 129b 	movw	r2, #2459	; 0x99b
 8000e70:	4293      	cmp	r3, r2
 8000e72:	ddf7      	ble.n	8000e64 <delay_Ms+0x14>
    for (; delay > 0; delay--)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dcee      	bgt.n	8000e5e <delay_Ms+0xe>
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
	...

08000e8c <USART1_Init>:

void USART1_Init(void) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 14);  // USART1 EN
 8000e90:	4a16      	ldr	r2, [pc, #88]	; (8000eec <USART1_Init+0x60>)
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <USART1_Init+0x60>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9a:	6213      	str	r3, [r2, #32]
    RCC->AHBENR |= 0x00000001;  // GPIOA EN
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <USART1_Init+0x60>)
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <USART1_Init+0x60>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	61d3      	str	r3, [r2, #28]
    GPIOA->AFR[1] = 0x00000700;  // PA9 AF7
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <USART1_Init+0x64>)
 8000eaa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOA->AFR[1] |= 0x00000070;  // PA10 AF7
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <USART1_Init+0x64>)
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <USART1_Init+0x64>)
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000eba:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->MODER |= 0x00080000;  // PA9 (TX)
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <USART1_Init+0x64>)
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <USART1_Init+0x64>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x00200000;  // PA10 (RX)
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <USART1_Init+0x64>)
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <USART1_Init+0x64>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed2:	6013      	str	r3, [r2, #0]
    USART1->BRR = 0x00000D05;  // 9600 baud
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <USART1_Init+0x68>)
 8000ed6:	f640 5205 	movw	r2, #3333	; 0xd05
 8000eda:	609a      	str	r2, [r3, #8]
    USART1->CR1 = 0x00000008 | 0x00000004 | 0x00002000;  // TX, RX, UART enable
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <USART1_Init+0x68>)
 8000ede:	f242 020c 	movw	r2, #8204	; 0x200c
 8000ee2:	60da      	str	r2, [r3, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40013800 	.word	0x40013800

08000ef8 <USART2_Init>:

void USART2_Init(void) {
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= 0x00020000;  // USART2 EN
 8000efc:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <USART2_Init+0x60>)
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <USART2_Init+0x60>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	6253      	str	r3, [r2, #36]	; 0x24
    RCC->AHBENR |= 0x00000001;  // GPIOA EN
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <USART2_Init+0x60>)
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <USART2_Init+0x60>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	61d3      	str	r3, [r2, #28]
    GPIOA->AFR[0] = 0x00000700;  // PA2 AF7
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <USART2_Init+0x64>)
 8000f16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f1a:	621a      	str	r2, [r3, #32]
    GPIOA->AFR[0] |= 0x00007000;  // PA3 AF7
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <USART2_Init+0x64>)
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <USART2_Init+0x64>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000f26:	6213      	str	r3, [r2, #32]
    GPIOA->MODER |= 0x00000020;  // PA2 (TX)
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <USART2_Init+0x64>)
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <USART2_Init+0x64>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x00000080;  // PA3 (RX)
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <USART2_Init+0x64>)
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <USART2_Init+0x64>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3e:	6013      	str	r3, [r2, #0]
    USART2->BRR = 0x00000D05;  // 9600 baud
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <USART2_Init+0x68>)
 8000f42:	f640 5205 	movw	r2, #3333	; 0xd05
 8000f46:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x00000008 | 0x00000004 | 0x00002000;  // TX, RX, UART enable
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <USART2_Init+0x68>)
 8000f4a:	f242 020c 	movw	r2, #8204	; 0x200c
 8000f4e:	60da      	str	r2, [r3, #12]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40004400 	.word	0x40004400

08000f64 <USART1_write>:

void USART1_write(char data) {
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & 0x0080)) {}
 8000f6e:	bf00      	nop
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <USART1_write+0x28>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f9      	beq.n	8000f70 <USART1_write+0xc>
    USART1->DR = data;
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <USART1_write+0x28>)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	6053      	str	r3, [r2, #4]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40013800 	.word	0x40013800

08000f90 <USART2_write>:

void USART2_write(char data) {
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & 0x0080)) {}
 8000f9a:	bf00      	nop
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <USART2_write+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f9      	beq.n	8000f9c <USART2_write+0xc>
    USART2->DR = data;
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <USART2_write+0x28>)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	6053      	str	r3, [r2, #4]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40004400 	.word	0x40004400

08000fbc <USART2_write_string>:

void USART2_write_string(const char* str) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000fc4:	e006      	b.n	8000fd4 <USART2_write_string+0x18>
        USART2_write(*str++);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffde 	bl	8000f90 <USART2_write>
    while (*str) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f4      	bne.n	8000fc6 <USART2_write_string+0xa>
    }
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <CRC16>:

unsigned short int CRC16(char *nData, unsigned short int wLength) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
    static const unsigned short int wCRCTable[] = {
        0X0000, 0XC0C1, 0XC181, 0X0140, /* ... rest of table ... */ 0X4040
    };
    unsigned char nTemp;
    unsigned short int wCRCWord = 0xFFFF;
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	81fb      	strh	r3, [r7, #14]
    while (wLength--) {
 8000ff6:	e011      	b.n	800101c <CRC16+0x38>
        nTemp = *nData++ ^ wCRCWord;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4053      	eors	r3, r2
 8001006:	737b      	strb	r3, [r7, #13]
        wCRCWord >>= 8;
 8001008:	89fb      	ldrh	r3, [r7, #14]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	81fb      	strh	r3, [r7, #14]
        wCRCWord ^= wCRCTable[nTemp];
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	4a08      	ldr	r2, [pc, #32]	; (8001034 <CRC16+0x50>)
 8001012:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	4053      	eors	r3, r2
 800101a:	81fb      	strh	r3, [r7, #14]
    while (wLength--) {
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	807a      	strh	r2, [r7, #2]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e8      	bne.n	8000ff8 <CRC16+0x14>
    }
    return wCRCWord;
 8001026:	89fb      	ldrh	r3, [r7, #14]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	08003198 	.word	0x08003198

08001038 <wrong_slave_address>:
char USART1_read(void) {
    while (!(USART1->SR & 0x0020)) {}
    return USART1->DR;
}

void wrong_slave_address(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    USART1->CR1 &= ~0x00000004;  // Disable RX
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <wrong_slave_address+0x44>)
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <wrong_slave_address+0x44>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f023 0304 	bic.w	r3, r3, #4
 8001046:	60d3      	str	r3, [r2, #12]
    delay_Ms(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f7ff ff01 	bl	8000e50 <delay_Ms>
    USART1->CR1 |= 0x00000004;  // Enable RX
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <wrong_slave_address+0x44>)
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <wrong_slave_address+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= 0x0020;  // Enable RX interrupt
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <wrong_slave_address+0x44>)
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <wrong_slave_address+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	60d3      	str	r3, [r2, #12]
    mFlag = 0;
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <wrong_slave_address+0x48>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
    rx_index = 0;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <wrong_slave_address+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
    USART2_write_string("Wrong slave address received\r\n");
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <wrong_slave_address+0x50>)
 8001074:	f7ff ffa2 	bl	8000fbc <USART2_write_string>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40013800 	.word	0x40013800
 8001080:	200001f4 	.word	0x200001f4
 8001084:	200001f0 	.word	0x200001f0
 8001088:	08003150 	.word	0x08003150

0800108c <read_sensor>:

int read_sensor(int input_address) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    int result = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
    ADC1->CR2 |= 0x40000000;  // Start conversion
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <read_sensor+0x3c>)
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <read_sensor+0x3c>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010a2:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & 2)) {}
 80010a4:	bf00      	nop
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <read_sensor+0x3c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f9      	beq.n	80010a6 <read_sensor+0x1a>
    result = ADC1->DR;
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <read_sensor+0x3c>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	60fb      	str	r3, [r7, #12]
    USART2_write_string("Sensor read\r\n");
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <read_sensor+0x40>)
 80010ba:	f7ff ff7f 	bl	8000fbc <USART2_write_string>
    return result;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40012400 	.word	0x40012400
 80010cc:	08003170 	.word	0x08003170

080010d0 <respond_frame>:

void respond_frame(int sensor_value) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	; 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    GPIOA->ODR |= 0x20;
 80010d8:	4a29      	ldr	r2, [pc, #164]	; (8001180 <respond_frame+0xb0>)
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <respond_frame+0xb0>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	6153      	str	r3, [r2, #20]
    char respond_frame[7] = {SLAVE_ADDRESS, 0x04, 0x02, 0, 0, 0, 0};
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <respond_frame+0xb4>)
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ee:	6018      	str	r0, [r3, #0]
 80010f0:	3304      	adds	r3, #4
 80010f2:	8019      	strh	r1, [r3, #0]
 80010f4:	3302      	adds	r3, #2
 80010f6:	0c0a      	lsrs	r2, r1, #16
 80010f8:	701a      	strb	r2, [r3, #0]
    respond_frame[3] = (sensor_value >> 8) & 0xFF;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	121b      	asrs	r3, r3, #8
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    respond_frame[4] = sensor_value & 0xFF;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    unsigned short int crc = CRC16(respond_frame, 5);
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	2105      	movs	r1, #5
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff66 	bl	8000fe4 <CRC16>
 8001118:	4603      	mov	r3, r0
 800111a:	857b      	strh	r3, [r7, #42]	; 0x2a
    respond_frame[5] = crc & 0xFF;  // Low byte
 800111c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    respond_frame[6] = (crc >> 8) & 0xFF;  // High byte
 8001124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b29b      	uxth	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (int i = 0; i < 7; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001134:	e00a      	b.n	800114c <respond_frame+0x7c>
        USART1_write(respond_frame[i]);
 8001136:	f107 0220 	add.w	r2, r7, #32
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff0f 	bl	8000f64 <USART1_write>
    for (int i = 0; i < 7; i++) {
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	3301      	adds	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114e:	2b06      	cmp	r3, #6
 8001150:	ddf1      	ble.n	8001136 <respond_frame+0x66>
    }
    GPIOA->ODR &= ~0x20;
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <respond_frame+0xb0>)
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <respond_frame+0xb0>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f023 0320 	bic.w	r3, r3, #32
 800115c:	6153      	str	r3, [r2, #20]
    char buffer[20];
    sprintf(buffer, "ADC Value: %d\r\n", sensor_value);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4908      	ldr	r1, [pc, #32]	; (8001188 <respond_frame+0xb8>)
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fa0f 	bl	800158a <siprintf>
    USART2_write_string(buffer);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff23 	bl	8000fbc <USART2_write_string>
}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020000 	.word	0x40020000
 8001184:	08003190 	.word	0x08003190
 8001188:	08003180 	.word	0x08003180

0800118c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800118c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800118e:	e003      	b.n	8001198 <LoopCopyDataInit>

08001190 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001192:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001194:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001196:	3104      	adds	r1, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800119c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800119e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011a0:	d3f6      	bcc.n	8001190 <CopyDataInit>
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011a4:	e002      	b.n	80011ac <LoopFillZerobss>

080011a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011a8:	f842 3b04 	str.w	r3, [r2], #4

080011ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011b0:	d3f9      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f000 f82f 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f000 f9ff 	bl	80015b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff fd17 	bl	8000bec <main>
  bx lr
 80011be:	4770      	bx	lr
  ldr r3, =_sidata
 80011c0:	080033f0 	.word	0x080033f0
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sbss
 80011cc:	200001d4 	.word	0x200001d4
  ldr r3, = _ebss
 80011d0:	20000210 	.word	0x20000210

080011d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_IRQHandler>
	...

080011d8 <_sbrk>:
	errno = ENOSYS;
	return -1;
}

void * _sbrk(int32_t incr)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <_sbrk+0x34>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x16>
		heap_end = & end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x34>)
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <_sbrk+0x38>)
 80011ec:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x34>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <_sbrk+0x34>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <_sbrk+0x34>)
 80011fe:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	200001f8 	.word	0x200001f8
 8001210:	20000210 	.word	0x20000210

08001214 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <SystemInit+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <SystemInit+0x5c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001224:	4912      	ldr	r1, [pc, #72]	; (8001270 <SystemInit+0x5c>)
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <SystemInit+0x5c>)
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <SystemInit+0x60>)
 800122c:	4013      	ands	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <SystemInit+0x5c>)
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <SystemInit+0x5c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800123a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800123e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <SystemInit+0x5c>)
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <SystemInit+0x5c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <SystemInit+0x5c>)
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <SystemInit+0x5c>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001256:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SystemInit+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <SystemInit+0x64>)
 8001260:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001264:	609a      	str	r2, [r3, #8]
#endif
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	88ffc00c 	.word	0x88ffc00c
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001296:	4b48      	ldr	r3, [pc, #288]	; (80013b8 <SystemCoreClockUpdate+0x13c>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d863      	bhi.n	800136e <SystemCoreClockUpdate+0xf2>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <SystemCoreClockUpdate+0x30>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012e1 	.word	0x080012e1
 80012b0:	0800136f 	.word	0x0800136f
 80012b4:	0800136f 	.word	0x0800136f
 80012b8:	0800136f 	.word	0x0800136f
 80012bc:	08001301 	.word	0x08001301
 80012c0:	0800136f 	.word	0x0800136f
 80012c4:	0800136f 	.word	0x0800136f
 80012c8:	0800136f 	.word	0x0800136f
 80012cc:	08001309 	.word	0x08001309
 80012d0:	0800136f 	.word	0x0800136f
 80012d4:	0800136f 	.word	0x0800136f
 80012d8:	0800136f 	.word	0x0800136f
 80012dc:	08001311 	.word	0x08001311
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <SystemCoreClockUpdate+0x13c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	0b5b      	lsrs	r3, r3, #13
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <SystemCoreClockUpdate+0x140>)
 80012fc:	601a      	str	r2, [r3, #0]
      break;
 80012fe:	e046      	b.n	800138e <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <SystemCoreClockUpdate+0x140>)
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <SystemCoreClockUpdate+0x144>)
 8001304:	601a      	str	r2, [r3, #0]
      break;
 8001306:	e042      	b.n	800138e <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <SystemCoreClockUpdate+0x140>)
 800130a:	4a2d      	ldr	r2, [pc, #180]	; (80013c0 <SystemCoreClockUpdate+0x144>)
 800130c:	601a      	str	r2, [r3, #0]
      break;
 800130e:	e03e      	b.n	800138e <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <SystemCoreClockUpdate+0x13c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001318:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <SystemCoreClockUpdate+0x13c>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001322:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <SystemCoreClockUpdate+0x148>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	0d9b      	lsrs	r3, r3, #22
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <SystemCoreClockUpdate+0x13c>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <SystemCoreClockUpdate+0x144>)
 800134a:	fb02 f203 	mul.w	r2, r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <SystemCoreClockUpdate+0x140>)
 8001356:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8001358:	e019      	b.n	800138e <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <SystemCoreClockUpdate+0x144>)
 800135e:	fb02 f203 	mul.w	r2, r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <SystemCoreClockUpdate+0x140>)
 800136a:	6013      	str	r3, [r2, #0]
      break;
 800136c:	e00f      	b.n	800138e <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <SystemCoreClockUpdate+0x13c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	0b5b      	lsrs	r3, r3, #13
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	461a      	mov	r2, r3
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <SystemCoreClockUpdate+0x140>)
 800138a:	601a      	str	r2, [r3, #0]
      break;
 800138c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <SystemCoreClockUpdate+0x13c>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <SystemCoreClockUpdate+0x14c>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <SystemCoreClockUpdate+0x140>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <SystemCoreClockUpdate+0x140>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	20000000 	.word	0x20000000
 80013c0:	007a1200 	.word	0x007a1200
 80013c4:	080031a4 	.word	0x080031a4
 80013c8:	080031b0 	.word	0x080031b0

080013cc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	int div = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80013dc:	e004      	b.n	80013e8 <ts_itoa+0x1c>
		div *= base;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	fb02 f303 	mul.w	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d2f3      	bcs.n	80013de <ts_itoa+0x12>

	while (div != 0)
 80013f6:	e029      	b.n	800144c <ts_itoa+0x80>
	{
		int num = d/div;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001400:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	fbb3 f1f2 	udiv	r1, r3, r2
 800140a:	fb02 f201 	mul.w	r2, r2, r1
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	fb92 f3f3 	sdiv	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b09      	cmp	r3, #9
 8001420:	dd0a      	ble.n	8001438 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c59      	adds	r1, r3, #1
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6011      	str	r1, [r2, #0]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	3237      	adds	r2, #55	; 0x37
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e009      	b.n	800144c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	1c59      	adds	r1, r3, #1
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	6011      	str	r1, [r2, #0]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	3230      	adds	r2, #48	; 0x30
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1d2      	bne.n	80013f8 <ts_itoa+0x2c>
	}
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800146c:	e07d      	b.n	800156a <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b25      	cmp	r3, #37	; 0x25
 8001474:	d171      	bne.n	800155a <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d01e      	beq.n	80014c2 <ts_formatstring+0x66>
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	dc06      	bgt.n	8001496 <ts_formatstring+0x3a>
 8001488:	2b58      	cmp	r3, #88	; 0x58
 800148a:	d050      	beq.n	800152e <ts_formatstring+0xd2>
 800148c:	2b63      	cmp	r3, #99	; 0x63
 800148e:	d00e      	beq.n	80014ae <ts_formatstring+0x52>
 8001490:	2b25      	cmp	r3, #37	; 0x25
 8001492:	d058      	beq.n	8001546 <ts_formatstring+0xea>
 8001494:	e05d      	b.n	8001552 <ts_formatstring+0xf6>
 8001496:	2b73      	cmp	r3, #115	; 0x73
 8001498:	d02b      	beq.n	80014f2 <ts_formatstring+0x96>
 800149a:	2b73      	cmp	r3, #115	; 0x73
 800149c:	dc02      	bgt.n	80014a4 <ts_formatstring+0x48>
 800149e:	2b69      	cmp	r3, #105	; 0x69
 80014a0:	d00f      	beq.n	80014c2 <ts_formatstring+0x66>
 80014a2:	e056      	b.n	8001552 <ts_formatstring+0xf6>
 80014a4:	2b75      	cmp	r3, #117	; 0x75
 80014a6:	d037      	beq.n	8001518 <ts_formatstring+0xbc>
 80014a8:	2b78      	cmp	r3, #120	; 0x78
 80014aa:	d040      	beq.n	800152e <ts_formatstring+0xd2>
 80014ac:	e051      	b.n	8001552 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60fa      	str	r2, [r7, #12]
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	1d11      	adds	r1, r2, #4
 80014b8:	6079      	str	r1, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
				break;
 80014c0:	e047      	b.n	8001552 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	1d1a      	adds	r2, r3, #4
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	da07      	bge.n	80014e2 <ts_formatstring+0x86>
					{
						val *= -1;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	425b      	negs	r3, r3
 80014d6:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60fa      	str	r2, [r7, #12]
 80014de:	222d      	movs	r2, #45	; 0x2d
 80014e0:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80014e2:	69f9      	ldr	r1, [r7, #28]
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	220a      	movs	r2, #10
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff6e 	bl	80013cc <ts_itoa>
				}
				break;
 80014f0:	e02f      	b.n	8001552 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1d1a      	adds	r2, r3, #4
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80014fc:	e007      	b.n	800150e <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	60fa      	str	r2, [r7, #12]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	1c51      	adds	r1, r2, #1
 8001508:	61b9      	str	r1, [r7, #24]
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f3      	bne.n	80014fe <ts_formatstring+0xa2>
					}
				}
				break;
 8001516:	e01c      	b.n	8001552 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	1d1a      	adds	r2, r3, #4
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	220a      	movs	r2, #10
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff50 	bl	80013cc <ts_itoa>
				break;
 800152c:	e011      	b.n	8001552 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1d1a      	adds	r2, r3, #4
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2210      	movs	r2, #16
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff44 	bl	80013cc <ts_itoa>
				break;
 8001544:	e005      	b.n	8001552 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	60fa      	str	r2, [r7, #12]
 800154c:	2225      	movs	r2, #37	; 0x25
 800154e:	701a      	strb	r2, [r3, #0]
				  break;
 8001550:	bf00      	nop
			}
			fmt++;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	e007      	b.n	800156a <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	60fa      	str	r2, [r7, #12]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	1c51      	adds	r1, r2, #1
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	7812      	ldrb	r2, [r2, #0]
 8001568:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f47f af7d 	bne.w	800146e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	461a      	mov	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	1ad3      	subs	r3, r2, r3
}
 8001582:	4618      	mov	r0, r3
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800158a:	b40e      	push	{r1, r2, r3}
 800158c:	b580      	push	{r7, lr}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	69f9      	ldr	r1, [r7, #28]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff5c 	bl	800145c <ts_formatstring>
 80015a4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015b2:	b003      	add	sp, #12
 80015b4:	4770      	bx	lr
	...

080015b8 <__libc_init_array>:
 80015b8:	b570      	push	{r4, r5, r6, lr}
 80015ba:	2500      	movs	r5, #0
 80015bc:	4e0c      	ldr	r6, [pc, #48]	; (80015f0 <__libc_init_array+0x38>)
 80015be:	4c0d      	ldr	r4, [pc, #52]	; (80015f4 <__libc_init_array+0x3c>)
 80015c0:	1ba4      	subs	r4, r4, r6
 80015c2:	10a4      	asrs	r4, r4, #2
 80015c4:	42a5      	cmp	r5, r4
 80015c6:	d109      	bne.n	80015dc <__libc_init_array+0x24>
 80015c8:	f001 fd56 	bl	8003078 <_init>
 80015cc:	2500      	movs	r5, #0
 80015ce:	4e0a      	ldr	r6, [pc, #40]	; (80015f8 <__libc_init_array+0x40>)
 80015d0:	4c0a      	ldr	r4, [pc, #40]	; (80015fc <__libc_init_array+0x44>)
 80015d2:	1ba4      	subs	r4, r4, r6
 80015d4:	10a4      	asrs	r4, r4, #2
 80015d6:	42a5      	cmp	r5, r4
 80015d8:	d105      	bne.n	80015e6 <__libc_init_array+0x2e>
 80015da:	bd70      	pop	{r4, r5, r6, pc}
 80015dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e0:	4798      	blx	r3
 80015e2:	3501      	adds	r5, #1
 80015e4:	e7ee      	b.n	80015c4 <__libc_init_array+0xc>
 80015e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ea:	4798      	blx	r3
 80015ec:	3501      	adds	r5, #1
 80015ee:	e7f2      	b.n	80015d6 <__libc_init_array+0x1e>
 80015f0:	080033e8 	.word	0x080033e8
 80015f4:	080033e8 	.word	0x080033e8
 80015f8:	080033e8 	.word	0x080033e8
 80015fc:	080033ec 	.word	0x080033ec

08001600 <__cvt>:
 8001600:	2b00      	cmp	r3, #0
 8001602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001606:	461e      	mov	r6, r3
 8001608:	bfbb      	ittet	lt
 800160a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800160e:	461e      	movlt	r6, r3
 8001610:	2300      	movge	r3, #0
 8001612:	232d      	movlt	r3, #45	; 0x2d
 8001614:	b088      	sub	sp, #32
 8001616:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8001618:	9912      	ldr	r1, [sp, #72]	; 0x48
 800161a:	f027 0720 	bic.w	r7, r7, #32
 800161e:	2f46      	cmp	r7, #70	; 0x46
 8001620:	4614      	mov	r4, r2
 8001622:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001624:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8001628:	700b      	strb	r3, [r1, #0]
 800162a:	d004      	beq.n	8001636 <__cvt+0x36>
 800162c:	2f45      	cmp	r7, #69	; 0x45
 800162e:	d100      	bne.n	8001632 <__cvt+0x32>
 8001630:	3501      	adds	r5, #1
 8001632:	2302      	movs	r3, #2
 8001634:	e000      	b.n	8001638 <__cvt+0x38>
 8001636:	2303      	movs	r3, #3
 8001638:	aa07      	add	r2, sp, #28
 800163a:	9204      	str	r2, [sp, #16]
 800163c:	aa06      	add	r2, sp, #24
 800163e:	9203      	str	r2, [sp, #12]
 8001640:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8001644:	4622      	mov	r2, r4
 8001646:	4633      	mov	r3, r6
 8001648:	f000 fbaa 	bl	8001da0 <_dtoa_r>
 800164c:	2f47      	cmp	r7, #71	; 0x47
 800164e:	4680      	mov	r8, r0
 8001650:	d102      	bne.n	8001658 <__cvt+0x58>
 8001652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001654:	07db      	lsls	r3, r3, #31
 8001656:	d526      	bpl.n	80016a6 <__cvt+0xa6>
 8001658:	2f46      	cmp	r7, #70	; 0x46
 800165a:	eb08 0905 	add.w	r9, r8, r5
 800165e:	d111      	bne.n	8001684 <__cvt+0x84>
 8001660:	f898 3000 	ldrb.w	r3, [r8]
 8001664:	2b30      	cmp	r3, #48	; 0x30
 8001666:	d10a      	bne.n	800167e <__cvt+0x7e>
 8001668:	2200      	movs	r2, #0
 800166a:	2300      	movs	r3, #0
 800166c:	4620      	mov	r0, r4
 800166e:	4631      	mov	r1, r6
 8001670:	f7ff f9ae 	bl	80009d0 <__aeabi_dcmpeq>
 8001674:	b918      	cbnz	r0, 800167e <__cvt+0x7e>
 8001676:	f1c5 0501 	rsb	r5, r5, #1
 800167a:	f8ca 5000 	str.w	r5, [sl]
 800167e:	f8da 3000 	ldr.w	r3, [sl]
 8001682:	4499      	add	r9, r3
 8001684:	2200      	movs	r2, #0
 8001686:	2300      	movs	r3, #0
 8001688:	4620      	mov	r0, r4
 800168a:	4631      	mov	r1, r6
 800168c:	f7ff f9a0 	bl	80009d0 <__aeabi_dcmpeq>
 8001690:	b938      	cbnz	r0, 80016a2 <__cvt+0xa2>
 8001692:	2230      	movs	r2, #48	; 0x30
 8001694:	9b07      	ldr	r3, [sp, #28]
 8001696:	4599      	cmp	r9, r3
 8001698:	d905      	bls.n	80016a6 <__cvt+0xa6>
 800169a:	1c59      	adds	r1, r3, #1
 800169c:	9107      	str	r1, [sp, #28]
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e7f8      	b.n	8001694 <__cvt+0x94>
 80016a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80016a6:	4640      	mov	r0, r8
 80016a8:	9b07      	ldr	r3, [sp, #28]
 80016aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80016ac:	eba3 0308 	sub.w	r3, r3, r8
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	b008      	add	sp, #32
 80016b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080016b8 <__exponent>:
 80016b8:	4603      	mov	r3, r0
 80016ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016bc:	2900      	cmp	r1, #0
 80016be:	f803 2b02 	strb.w	r2, [r3], #2
 80016c2:	bfb6      	itet	lt
 80016c4:	222d      	movlt	r2, #45	; 0x2d
 80016c6:	222b      	movge	r2, #43	; 0x2b
 80016c8:	4249      	neglt	r1, r1
 80016ca:	2909      	cmp	r1, #9
 80016cc:	7042      	strb	r2, [r0, #1]
 80016ce:	dd21      	ble.n	8001714 <__exponent+0x5c>
 80016d0:	f10d 0207 	add.w	r2, sp, #7
 80016d4:	4617      	mov	r7, r2
 80016d6:	260a      	movs	r6, #10
 80016d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80016dc:	fb06 1115 	mls	r1, r6, r5, r1
 80016e0:	2d09      	cmp	r5, #9
 80016e2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80016e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80016ea:	f102 34ff 	add.w	r4, r2, #4294967295
 80016ee:	4629      	mov	r1, r5
 80016f0:	dc09      	bgt.n	8001706 <__exponent+0x4e>
 80016f2:	3130      	adds	r1, #48	; 0x30
 80016f4:	3a02      	subs	r2, #2
 80016f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80016fa:	42ba      	cmp	r2, r7
 80016fc:	461c      	mov	r4, r3
 80016fe:	d304      	bcc.n	800170a <__exponent+0x52>
 8001700:	1a20      	subs	r0, r4, r0
 8001702:	b003      	add	sp, #12
 8001704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001706:	4622      	mov	r2, r4
 8001708:	e7e6      	b.n	80016d8 <__exponent+0x20>
 800170a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800170e:	f803 1b01 	strb.w	r1, [r3], #1
 8001712:	e7f2      	b.n	80016fa <__exponent+0x42>
 8001714:	2230      	movs	r2, #48	; 0x30
 8001716:	461c      	mov	r4, r3
 8001718:	4411      	add	r1, r2
 800171a:	f804 2b02 	strb.w	r2, [r4], #2
 800171e:	7059      	strb	r1, [r3, #1]
 8001720:	e7ee      	b.n	8001700 <__exponent+0x48>
	...

08001724 <_printf_float>:
 8001724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001728:	b091      	sub	sp, #68	; 0x44
 800172a:	460c      	mov	r4, r1
 800172c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800172e:	4693      	mov	fp, r2
 8001730:	461e      	mov	r6, r3
 8001732:	4605      	mov	r5, r0
 8001734:	f001 f908 	bl	8002948 <_localeconv_r>
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	9309      	str	r3, [sp, #36]	; 0x24
 800173e:	f7fe fd1f 	bl	8000180 <strlen>
 8001742:	2300      	movs	r3, #0
 8001744:	930e      	str	r3, [sp, #56]	; 0x38
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	900a      	str	r0, [sp, #40]	; 0x28
 800174a:	3307      	adds	r3, #7
 800174c:	f023 0307 	bic.w	r3, r3, #7
 8001750:	f103 0208 	add.w	r2, r3, #8
 8001754:	f894 8018 	ldrb.w	r8, [r4, #24]
 8001758:	f8d4 a000 	ldr.w	sl, [r4]
 800175c:	603a      	str	r2, [r7, #0]
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001766:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 800176a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800176c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001770:	930b      	str	r3, [sp, #44]	; 0x2c
 8001772:	f04f 32ff 	mov.w	r2, #4294967295
 8001776:	4ba6      	ldr	r3, [pc, #664]	; (8001a10 <_printf_float+0x2ec>)
 8001778:	4638      	mov	r0, r7
 800177a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800177c:	f7ff f95a 	bl	8000a34 <__aeabi_dcmpun>
 8001780:	2800      	cmp	r0, #0
 8001782:	f040 81f7 	bne.w	8001b74 <_printf_float+0x450>
 8001786:	f04f 32ff 	mov.w	r2, #4294967295
 800178a:	4ba1      	ldr	r3, [pc, #644]	; (8001a10 <_printf_float+0x2ec>)
 800178c:	4638      	mov	r0, r7
 800178e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001790:	f7ff f932 	bl	80009f8 <__aeabi_dcmple>
 8001794:	2800      	cmp	r0, #0
 8001796:	f040 81ed 	bne.w	8001b74 <_printf_float+0x450>
 800179a:	2200      	movs	r2, #0
 800179c:	2300      	movs	r3, #0
 800179e:	4638      	mov	r0, r7
 80017a0:	4649      	mov	r1, r9
 80017a2:	f7ff f91f 	bl	80009e4 <__aeabi_dcmplt>
 80017a6:	b110      	cbz	r0, 80017ae <_printf_float+0x8a>
 80017a8:	232d      	movs	r3, #45	; 0x2d
 80017aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017ae:	4b99      	ldr	r3, [pc, #612]	; (8001a14 <_printf_float+0x2f0>)
 80017b0:	4f99      	ldr	r7, [pc, #612]	; (8001a18 <_printf_float+0x2f4>)
 80017b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80017b6:	bf98      	it	ls
 80017b8:	461f      	movls	r7, r3
 80017ba:	2303      	movs	r3, #3
 80017bc:	f04f 0900 	mov.w	r9, #0
 80017c0:	6123      	str	r3, [r4, #16]
 80017c2:	f02a 0304 	bic.w	r3, sl, #4
 80017c6:	6023      	str	r3, [r4, #0]
 80017c8:	9600      	str	r6, [sp, #0]
 80017ca:	465b      	mov	r3, fp
 80017cc:	aa0f      	add	r2, sp, #60	; 0x3c
 80017ce:	4621      	mov	r1, r4
 80017d0:	4628      	mov	r0, r5
 80017d2:	f000 f9df 	bl	8001b94 <_printf_common>
 80017d6:	3001      	adds	r0, #1
 80017d8:	f040 809a 	bne.w	8001910 <_printf_float+0x1ec>
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	b011      	add	sp, #68	; 0x44
 80017e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017e6:	6862      	ldr	r2, [r4, #4]
 80017e8:	a80e      	add	r0, sp, #56	; 0x38
 80017ea:	1c53      	adds	r3, r2, #1
 80017ec:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80017f0:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 80017f4:	d141      	bne.n	800187a <_printf_float+0x156>
 80017f6:	2206      	movs	r2, #6
 80017f8:	6062      	str	r2, [r4, #4]
 80017fa:	2100      	movs	r1, #0
 80017fc:	6023      	str	r3, [r4, #0]
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	6863      	ldr	r3, [r4, #4]
 8001802:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8001806:	9005      	str	r0, [sp, #20]
 8001808:	9202      	str	r2, [sp, #8]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	463a      	mov	r2, r7
 800180e:	464b      	mov	r3, r9
 8001810:	9106      	str	r1, [sp, #24]
 8001812:	f8cd 8010 	str.w	r8, [sp, #16]
 8001816:	f8cd e00c 	str.w	lr, [sp, #12]
 800181a:	4628      	mov	r0, r5
 800181c:	f7ff fef0 	bl	8001600 <__cvt>
 8001820:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8001824:	2b47      	cmp	r3, #71	; 0x47
 8001826:	4607      	mov	r7, r0
 8001828:	d109      	bne.n	800183e <_printf_float+0x11a>
 800182a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800182c:	1cd8      	adds	r0, r3, #3
 800182e:	db02      	blt.n	8001836 <_printf_float+0x112>
 8001830:	6862      	ldr	r2, [r4, #4]
 8001832:	4293      	cmp	r3, r2
 8001834:	dd59      	ble.n	80018ea <_printf_float+0x1c6>
 8001836:	f1a8 0802 	sub.w	r8, r8, #2
 800183a:	fa5f f888 	uxtb.w	r8, r8
 800183e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8001842:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001844:	d836      	bhi.n	80018b4 <_printf_float+0x190>
 8001846:	3901      	subs	r1, #1
 8001848:	4642      	mov	r2, r8
 800184a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800184e:	910d      	str	r1, [sp, #52]	; 0x34
 8001850:	f7ff ff32 	bl	80016b8 <__exponent>
 8001854:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001856:	4681      	mov	r9, r0
 8001858:	1883      	adds	r3, r0, r2
 800185a:	2a01      	cmp	r2, #1
 800185c:	6123      	str	r3, [r4, #16]
 800185e:	dc02      	bgt.n	8001866 <_printf_float+0x142>
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	07d1      	lsls	r1, r2, #31
 8001864:	d501      	bpl.n	800186a <_printf_float+0x146>
 8001866:	3301      	adds	r3, #1
 8001868:	6123      	str	r3, [r4, #16]
 800186a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0aa      	beq.n	80017c8 <_printf_float+0xa4>
 8001872:	232d      	movs	r3, #45	; 0x2d
 8001874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001878:	e7a6      	b.n	80017c8 <_printf_float+0xa4>
 800187a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800187e:	d002      	beq.n	8001886 <_printf_float+0x162>
 8001880:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001884:	d1b9      	bne.n	80017fa <_printf_float+0xd6>
 8001886:	b19a      	cbz	r2, 80018b0 <_printf_float+0x18c>
 8001888:	2100      	movs	r1, #0
 800188a:	9106      	str	r1, [sp, #24]
 800188c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8001890:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	9005      	str	r0, [sp, #20]
 8001898:	463a      	mov	r2, r7
 800189a:	f8cd 8010 	str.w	r8, [sp, #16]
 800189e:	f8cd e00c 	str.w	lr, [sp, #12]
 80018a2:	9102      	str	r1, [sp, #8]
 80018a4:	464b      	mov	r3, r9
 80018a6:	4628      	mov	r0, r5
 80018a8:	f7ff feaa 	bl	8001600 <__cvt>
 80018ac:	4607      	mov	r7, r0
 80018ae:	e7bc      	b.n	800182a <_printf_float+0x106>
 80018b0:	2201      	movs	r2, #1
 80018b2:	e7a1      	b.n	80017f8 <_printf_float+0xd4>
 80018b4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80018b8:	d119      	bne.n	80018ee <_printf_float+0x1ca>
 80018ba:	2900      	cmp	r1, #0
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	dd0c      	ble.n	80018da <_printf_float+0x1b6>
 80018c0:	6121      	str	r1, [r4, #16]
 80018c2:	b913      	cbnz	r3, 80018ca <_printf_float+0x1a6>
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	07d2      	lsls	r2, r2, #31
 80018c8:	d502      	bpl.n	80018d0 <_printf_float+0x1ac>
 80018ca:	3301      	adds	r3, #1
 80018cc:	440b      	add	r3, r1
 80018ce:	6123      	str	r3, [r4, #16]
 80018d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80018d2:	f04f 0900 	mov.w	r9, #0
 80018d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80018d8:	e7c7      	b.n	800186a <_printf_float+0x146>
 80018da:	b913      	cbnz	r3, 80018e2 <_printf_float+0x1be>
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	07d0      	lsls	r0, r2, #31
 80018e0:	d501      	bpl.n	80018e6 <_printf_float+0x1c2>
 80018e2:	3302      	adds	r3, #2
 80018e4:	e7f3      	b.n	80018ce <_printf_float+0x1aa>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e7f1      	b.n	80018ce <_printf_float+0x1aa>
 80018ea:	f04f 0867 	mov.w	r8, #103	; 0x67
 80018ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80018f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018f2:	4293      	cmp	r3, r2
 80018f4:	db05      	blt.n	8001902 <_printf_float+0x1de>
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	6123      	str	r3, [r4, #16]
 80018fa:	07d1      	lsls	r1, r2, #31
 80018fc:	d5e8      	bpl.n	80018d0 <_printf_float+0x1ac>
 80018fe:	3301      	adds	r3, #1
 8001900:	e7e5      	b.n	80018ce <_printf_float+0x1aa>
 8001902:	2b00      	cmp	r3, #0
 8001904:	bfcc      	ite	gt
 8001906:	2301      	movgt	r3, #1
 8001908:	f1c3 0302 	rsble	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	e7de      	b.n	80018ce <_printf_float+0x1aa>
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	055a      	lsls	r2, r3, #21
 8001914:	d407      	bmi.n	8001926 <_printf_float+0x202>
 8001916:	6923      	ldr	r3, [r4, #16]
 8001918:	463a      	mov	r2, r7
 800191a:	4659      	mov	r1, fp
 800191c:	4628      	mov	r0, r5
 800191e:	47b0      	blx	r6
 8001920:	3001      	adds	r0, #1
 8001922:	d12a      	bne.n	800197a <_printf_float+0x256>
 8001924:	e75a      	b.n	80017dc <_printf_float+0xb8>
 8001926:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800192a:	f240 80dc 	bls.w	8001ae6 <_printf_float+0x3c2>
 800192e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001932:	2200      	movs	r2, #0
 8001934:	2300      	movs	r3, #0
 8001936:	f7ff f84b 	bl	80009d0 <__aeabi_dcmpeq>
 800193a:	2800      	cmp	r0, #0
 800193c:	d039      	beq.n	80019b2 <_printf_float+0x28e>
 800193e:	2301      	movs	r3, #1
 8001940:	4a36      	ldr	r2, [pc, #216]	; (8001a1c <_printf_float+0x2f8>)
 8001942:	4659      	mov	r1, fp
 8001944:	4628      	mov	r0, r5
 8001946:	47b0      	blx	r6
 8001948:	3001      	adds	r0, #1
 800194a:	f43f af47 	beq.w	80017dc <_printf_float+0xb8>
 800194e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001952:	429a      	cmp	r2, r3
 8001954:	db02      	blt.n	800195c <_printf_float+0x238>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	07d8      	lsls	r0, r3, #31
 800195a:	d50e      	bpl.n	800197a <_printf_float+0x256>
 800195c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800195e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001960:	4659      	mov	r1, fp
 8001962:	4628      	mov	r0, r5
 8001964:	47b0      	blx	r6
 8001966:	3001      	adds	r0, #1
 8001968:	f43f af38 	beq.w	80017dc <_printf_float+0xb8>
 800196c:	2700      	movs	r7, #0
 800196e:	f104 081a 	add.w	r8, r4, #26
 8001972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001974:	3b01      	subs	r3, #1
 8001976:	429f      	cmp	r7, r3
 8001978:	db11      	blt.n	800199e <_printf_float+0x27a>
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	079f      	lsls	r7, r3, #30
 800197e:	d508      	bpl.n	8001992 <_printf_float+0x26e>
 8001980:	2700      	movs	r7, #0
 8001982:	f104 0819 	add.w	r8, r4, #25
 8001986:	68e3      	ldr	r3, [r4, #12]
 8001988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	429f      	cmp	r7, r3
 800198e:	f2c0 80e7 	blt.w	8001b60 <_printf_float+0x43c>
 8001992:	68e0      	ldr	r0, [r4, #12]
 8001994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001996:	4298      	cmp	r0, r3
 8001998:	bfb8      	it	lt
 800199a:	4618      	movlt	r0, r3
 800199c:	e720      	b.n	80017e0 <_printf_float+0xbc>
 800199e:	2301      	movs	r3, #1
 80019a0:	4642      	mov	r2, r8
 80019a2:	4659      	mov	r1, fp
 80019a4:	4628      	mov	r0, r5
 80019a6:	47b0      	blx	r6
 80019a8:	3001      	adds	r0, #1
 80019aa:	f43f af17 	beq.w	80017dc <_printf_float+0xb8>
 80019ae:	3701      	adds	r7, #1
 80019b0:	e7df      	b.n	8001972 <_printf_float+0x24e>
 80019b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	dc33      	bgt.n	8001a20 <_printf_float+0x2fc>
 80019b8:	2301      	movs	r3, #1
 80019ba:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <_printf_float+0x2f8>)
 80019bc:	4659      	mov	r1, fp
 80019be:	4628      	mov	r0, r5
 80019c0:	47b0      	blx	r6
 80019c2:	3001      	adds	r0, #1
 80019c4:	f43f af0a 	beq.w	80017dc <_printf_float+0xb8>
 80019c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80019ca:	b923      	cbnz	r3, 80019d6 <_printf_float+0x2b2>
 80019cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019ce:	b913      	cbnz	r3, 80019d6 <_printf_float+0x2b2>
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	07d9      	lsls	r1, r3, #31
 80019d4:	d5d1      	bpl.n	800197a <_printf_float+0x256>
 80019d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80019da:	4659      	mov	r1, fp
 80019dc:	4628      	mov	r0, r5
 80019de:	47b0      	blx	r6
 80019e0:	3001      	adds	r0, #1
 80019e2:	f43f aefb 	beq.w	80017dc <_printf_float+0xb8>
 80019e6:	f04f 0800 	mov.w	r8, #0
 80019ea:	f104 091a 	add.w	r9, r4, #26
 80019ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80019f0:	425b      	negs	r3, r3
 80019f2:	4598      	cmp	r8, r3
 80019f4:	db01      	blt.n	80019fa <_printf_float+0x2d6>
 80019f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019f8:	e78e      	b.n	8001918 <_printf_float+0x1f4>
 80019fa:	2301      	movs	r3, #1
 80019fc:	464a      	mov	r2, r9
 80019fe:	4659      	mov	r1, fp
 8001a00:	4628      	mov	r0, r5
 8001a02:	47b0      	blx	r6
 8001a04:	3001      	adds	r0, #1
 8001a06:	f43f aee9 	beq.w	80017dc <_printf_float+0xb8>
 8001a0a:	f108 0801 	add.w	r8, r8, #1
 8001a0e:	e7ee      	b.n	80019ee <_printf_float+0x2ca>
 8001a10:	7fefffff 	.word	0x7fefffff
 8001a14:	080031c0 	.word	0x080031c0
 8001a18:	080031c4 	.word	0x080031c4
 8001a1c:	080031d0 	.word	0x080031d0
 8001a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001a22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a24:	429a      	cmp	r2, r3
 8001a26:	bfa8      	it	ge
 8001a28:	461a      	movge	r2, r3
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	dc36      	bgt.n	8001a9e <_printf_float+0x37a>
 8001a30:	f04f 0a00 	mov.w	sl, #0
 8001a34:	f104 031a 	add.w	r3, r4, #26
 8001a38:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8001a3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a3e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8001a42:	eba9 0308 	sub.w	r3, r9, r8
 8001a46:	459a      	cmp	sl, r3
 8001a48:	db31      	blt.n	8001aae <_printf_float+0x38a>
 8001a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	db38      	blt.n	8001ac4 <_printf_float+0x3a0>
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	07da      	lsls	r2, r3, #31
 8001a56:	d435      	bmi.n	8001ac4 <_printf_float+0x3a0>
 8001a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001a5c:	eba3 0209 	sub.w	r2, r3, r9
 8001a60:	eba3 0801 	sub.w	r8, r3, r1
 8001a64:	4590      	cmp	r8, r2
 8001a66:	bfa8      	it	ge
 8001a68:	4690      	movge	r8, r2
 8001a6a:	f1b8 0f00 	cmp.w	r8, #0
 8001a6e:	dc31      	bgt.n	8001ad4 <_printf_float+0x3b0>
 8001a70:	2700      	movs	r7, #0
 8001a72:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8001a76:	f104 091a 	add.w	r9, r4, #26
 8001a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	eba3 0308 	sub.w	r3, r3, r8
 8001a84:	429f      	cmp	r7, r3
 8001a86:	f6bf af78 	bge.w	800197a <_printf_float+0x256>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	464a      	mov	r2, r9
 8001a8e:	4659      	mov	r1, fp
 8001a90:	4628      	mov	r0, r5
 8001a92:	47b0      	blx	r6
 8001a94:	3001      	adds	r0, #1
 8001a96:	f43f aea1 	beq.w	80017dc <_printf_float+0xb8>
 8001a9a:	3701      	adds	r7, #1
 8001a9c:	e7ed      	b.n	8001a7a <_printf_float+0x356>
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	4659      	mov	r1, fp
 8001aa2:	463a      	mov	r2, r7
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	47b0      	blx	r6
 8001aa8:	3001      	adds	r0, #1
 8001aaa:	d1c1      	bne.n	8001a30 <_printf_float+0x30c>
 8001aac:	e696      	b.n	80017dc <_printf_float+0xb8>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001ab2:	4659      	mov	r1, fp
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	47b0      	blx	r6
 8001ab8:	3001      	adds	r0, #1
 8001aba:	f43f ae8f 	beq.w	80017dc <_printf_float+0xb8>
 8001abe:	f10a 0a01 	add.w	sl, sl, #1
 8001ac2:	e7bc      	b.n	8001a3e <_printf_float+0x31a>
 8001ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ac8:	4659      	mov	r1, fp
 8001aca:	4628      	mov	r0, r5
 8001acc:	47b0      	blx	r6
 8001ace:	3001      	adds	r0, #1
 8001ad0:	d1c2      	bne.n	8001a58 <_printf_float+0x334>
 8001ad2:	e683      	b.n	80017dc <_printf_float+0xb8>
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	eb07 0209 	add.w	r2, r7, r9
 8001ada:	4659      	mov	r1, fp
 8001adc:	4628      	mov	r0, r5
 8001ade:	47b0      	blx	r6
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d1c5      	bne.n	8001a70 <_printf_float+0x34c>
 8001ae4:	e67a      	b.n	80017dc <_printf_float+0xb8>
 8001ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ae8:	2a01      	cmp	r2, #1
 8001aea:	dc01      	bgt.n	8001af0 <_printf_float+0x3cc>
 8001aec:	07db      	lsls	r3, r3, #31
 8001aee:	d534      	bpl.n	8001b5a <_printf_float+0x436>
 8001af0:	2301      	movs	r3, #1
 8001af2:	463a      	mov	r2, r7
 8001af4:	4659      	mov	r1, fp
 8001af6:	4628      	mov	r0, r5
 8001af8:	47b0      	blx	r6
 8001afa:	3001      	adds	r0, #1
 8001afc:	f43f ae6e 	beq.w	80017dc <_printf_float+0xb8>
 8001b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b04:	4659      	mov	r1, fp
 8001b06:	4628      	mov	r0, r5
 8001b08:	47b0      	blx	r6
 8001b0a:	3001      	adds	r0, #1
 8001b0c:	f43f ae66 	beq.w	80017dc <_printf_float+0xb8>
 8001b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001b14:	2200      	movs	r2, #0
 8001b16:	2300      	movs	r3, #0
 8001b18:	f7fe ff5a 	bl	80009d0 <__aeabi_dcmpeq>
 8001b1c:	b150      	cbz	r0, 8001b34 <_printf_float+0x410>
 8001b1e:	2700      	movs	r7, #0
 8001b20:	f104 081a 	add.w	r8, r4, #26
 8001b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b26:	3b01      	subs	r3, #1
 8001b28:	429f      	cmp	r7, r3
 8001b2a:	db0c      	blt.n	8001b46 <_printf_float+0x422>
 8001b2c:	464b      	mov	r3, r9
 8001b2e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001b32:	e6f2      	b.n	800191a <_printf_float+0x1f6>
 8001b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001b36:	1c7a      	adds	r2, r7, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	4659      	mov	r1, fp
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	47b0      	blx	r6
 8001b40:	3001      	adds	r0, #1
 8001b42:	d1f3      	bne.n	8001b2c <_printf_float+0x408>
 8001b44:	e64a      	b.n	80017dc <_printf_float+0xb8>
 8001b46:	2301      	movs	r3, #1
 8001b48:	4642      	mov	r2, r8
 8001b4a:	4659      	mov	r1, fp
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	47b0      	blx	r6
 8001b50:	3001      	adds	r0, #1
 8001b52:	f43f ae43 	beq.w	80017dc <_printf_float+0xb8>
 8001b56:	3701      	adds	r7, #1
 8001b58:	e7e4      	b.n	8001b24 <_printf_float+0x400>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	463a      	mov	r2, r7
 8001b5e:	e7ec      	b.n	8001b3a <_printf_float+0x416>
 8001b60:	2301      	movs	r3, #1
 8001b62:	4642      	mov	r2, r8
 8001b64:	4659      	mov	r1, fp
 8001b66:	4628      	mov	r0, r5
 8001b68:	47b0      	blx	r6
 8001b6a:	3001      	adds	r0, #1
 8001b6c:	f43f ae36 	beq.w	80017dc <_printf_float+0xb8>
 8001b70:	3701      	adds	r7, #1
 8001b72:	e708      	b.n	8001986 <_printf_float+0x262>
 8001b74:	463a      	mov	r2, r7
 8001b76:	464b      	mov	r3, r9
 8001b78:	4638      	mov	r0, r7
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	f7fe ff5a 	bl	8000a34 <__aeabi_dcmpun>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	f43f ae30 	beq.w	80017e6 <_printf_float+0xc2>
 8001b86:	4b01      	ldr	r3, [pc, #4]	; (8001b8c <_printf_float+0x468>)
 8001b88:	4f01      	ldr	r7, [pc, #4]	; (8001b90 <_printf_float+0x46c>)
 8001b8a:	e612      	b.n	80017b2 <_printf_float+0x8e>
 8001b8c:	080031c8 	.word	0x080031c8
 8001b90:	080031cc 	.word	0x080031cc

08001b94 <_printf_common>:
 8001b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b98:	4691      	mov	r9, r2
 8001b9a:	461f      	mov	r7, r3
 8001b9c:	688a      	ldr	r2, [r1, #8]
 8001b9e:	690b      	ldr	r3, [r1, #16]
 8001ba0:	4606      	mov	r6, r0
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	bfb8      	it	lt
 8001ba6:	4613      	movlt	r3, r2
 8001ba8:	f8c9 3000 	str.w	r3, [r9]
 8001bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bb6:	b112      	cbz	r2, 8001bbe <_printf_common+0x2a>
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f8c9 3000 	str.w	r3, [r9]
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	0699      	lsls	r1, r3, #26
 8001bc2:	bf42      	ittt	mi
 8001bc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001bc8:	3302      	addmi	r3, #2
 8001bca:	f8c9 3000 	strmi.w	r3, [r9]
 8001bce:	6825      	ldr	r5, [r4, #0]
 8001bd0:	f015 0506 	ands.w	r5, r5, #6
 8001bd4:	d107      	bne.n	8001be6 <_printf_common+0x52>
 8001bd6:	f104 0a19 	add.w	sl, r4, #25
 8001bda:	68e3      	ldr	r3, [r4, #12]
 8001bdc:	f8d9 2000 	ldr.w	r2, [r9]
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	429d      	cmp	r5, r3
 8001be4:	db2a      	blt.n	8001c3c <_printf_common+0xa8>
 8001be6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	3300      	adds	r3, #0
 8001bee:	bf18      	it	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	0692      	lsls	r2, r2, #26
 8001bf4:	d42f      	bmi.n	8001c56 <_printf_common+0xc2>
 8001bf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001bfa:	4639      	mov	r1, r7
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	47c0      	blx	r8
 8001c00:	3001      	adds	r0, #1
 8001c02:	d022      	beq.n	8001c4a <_printf_common+0xb6>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	68e5      	ldr	r5, [r4, #12]
 8001c08:	f003 0306 	and.w	r3, r3, #6
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	bf18      	it	ne
 8001c10:	2500      	movne	r5, #0
 8001c12:	f8d9 2000 	ldr.w	r2, [r9]
 8001c16:	f04f 0900 	mov.w	r9, #0
 8001c1a:	bf08      	it	eq
 8001c1c:	1aad      	subeq	r5, r5, r2
 8001c1e:	68a3      	ldr	r3, [r4, #8]
 8001c20:	6922      	ldr	r2, [r4, #16]
 8001c22:	bf08      	it	eq
 8001c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bfc4      	itt	gt
 8001c2c:	1a9b      	subgt	r3, r3, r2
 8001c2e:	18ed      	addgt	r5, r5, r3
 8001c30:	341a      	adds	r4, #26
 8001c32:	454d      	cmp	r5, r9
 8001c34:	d11b      	bne.n	8001c6e <_printf_common+0xda>
 8001c36:	2000      	movs	r0, #0
 8001c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	4652      	mov	r2, sl
 8001c40:	4639      	mov	r1, r7
 8001c42:	4630      	mov	r0, r6
 8001c44:	47c0      	blx	r8
 8001c46:	3001      	adds	r0, #1
 8001c48:	d103      	bne.n	8001c52 <_printf_common+0xbe>
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c52:	3501      	adds	r5, #1
 8001c54:	e7c1      	b.n	8001bda <_printf_common+0x46>
 8001c56:	2030      	movs	r0, #48	; 0x30
 8001c58:	18e1      	adds	r1, r4, r3
 8001c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c64:	4422      	add	r2, r4
 8001c66:	3302      	adds	r3, #2
 8001c68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c6c:	e7c3      	b.n	8001bf6 <_printf_common+0x62>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4622      	mov	r2, r4
 8001c72:	4639      	mov	r1, r7
 8001c74:	4630      	mov	r0, r6
 8001c76:	47c0      	blx	r8
 8001c78:	3001      	adds	r0, #1
 8001c7a:	d0e6      	beq.n	8001c4a <_printf_common+0xb6>
 8001c7c:	f109 0901 	add.w	r9, r9, #1
 8001c80:	e7d7      	b.n	8001c32 <_printf_common+0x9e>

08001c82 <quorem>:
 8001c82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c86:	6903      	ldr	r3, [r0, #16]
 8001c88:	690c      	ldr	r4, [r1, #16]
 8001c8a:	4680      	mov	r8, r0
 8001c8c:	429c      	cmp	r4, r3
 8001c8e:	f300 8082 	bgt.w	8001d96 <quorem+0x114>
 8001c92:	3c01      	subs	r4, #1
 8001c94:	f101 0714 	add.w	r7, r1, #20
 8001c98:	f100 0614 	add.w	r6, r0, #20
 8001c9c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8001ca0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ca4:	3501      	adds	r5, #1
 8001ca6:	fbb0 f5f5 	udiv	r5, r0, r5
 8001caa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8001cae:	eb06 030e 	add.w	r3, r6, lr
 8001cb2:	eb07 090e 	add.w	r9, r7, lr
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	b38d      	cbz	r5, 8001d1e <quorem+0x9c>
 8001cba:	f04f 0a00 	mov.w	sl, #0
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	46b4      	mov	ip, r6
 8001cc2:	46d3      	mov	fp, sl
 8001cc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8001cc8:	b293      	uxth	r3, r2
 8001cca:	fb05 a303 	mla	r3, r5, r3, sl
 8001cce:	0c12      	lsrs	r2, r2, #16
 8001cd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8001cd4:	fb05 a202 	mla	r2, r5, r2, sl
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	ebab 0303 	sub.w	r3, fp, r3
 8001cde:	f8bc b000 	ldrh.w	fp, [ip]
 8001ce2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8001ce6:	445b      	add	r3, fp
 8001ce8:	fa1f fb82 	uxth.w	fp, r2
 8001cec:	f8dc 2000 	ldr.w	r2, [ip]
 8001cf0:	4581      	cmp	r9, r0
 8001cf2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8001cf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d00:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001d04:	f84c 3b04 	str.w	r3, [ip], #4
 8001d08:	d2dc      	bcs.n	8001cc4 <quorem+0x42>
 8001d0a:	f856 300e 	ldr.w	r3, [r6, lr]
 8001d0e:	b933      	cbnz	r3, 8001d1e <quorem+0x9c>
 8001d10:	9b01      	ldr	r3, [sp, #4]
 8001d12:	3b04      	subs	r3, #4
 8001d14:	429e      	cmp	r6, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	d331      	bcc.n	8001d7e <quorem+0xfc>
 8001d1a:	f8c8 4010 	str.w	r4, [r8, #16]
 8001d1e:	4640      	mov	r0, r8
 8001d20:	f001 f83b 	bl	8002d9a <__mcmp>
 8001d24:	2800      	cmp	r0, #0
 8001d26:	db26      	blt.n	8001d76 <quorem+0xf4>
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f04f 0e00 	mov.w	lr, #0
 8001d2e:	3501      	adds	r5, #1
 8001d30:	f857 1b04 	ldr.w	r1, [r7], #4
 8001d34:	f8d0 c000 	ldr.w	ip, [r0]
 8001d38:	b28b      	uxth	r3, r1
 8001d3a:	ebae 0303 	sub.w	r3, lr, r3
 8001d3e:	fa1f f28c 	uxth.w	r2, ip
 8001d42:	4413      	add	r3, r2
 8001d44:	0c0a      	lsrs	r2, r1, #16
 8001d46:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8001d4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001d54:	45b9      	cmp	r9, r7
 8001d56:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8001d5a:	f840 3b04 	str.w	r3, [r0], #4
 8001d5e:	d2e7      	bcs.n	8001d30 <quorem+0xae>
 8001d60:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001d64:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8001d68:	b92a      	cbnz	r2, 8001d76 <quorem+0xf4>
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	429e      	cmp	r6, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	d30b      	bcc.n	8001d8a <quorem+0x108>
 8001d72:	f8c8 4010 	str.w	r4, [r8, #16]
 8001d76:	4628      	mov	r0, r5
 8001d78:	b003      	add	sp, #12
 8001d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	3b04      	subs	r3, #4
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d1c9      	bne.n	8001d1a <quorem+0x98>
 8001d86:	3c01      	subs	r4, #1
 8001d88:	e7c4      	b.n	8001d14 <quorem+0x92>
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	3b04      	subs	r3, #4
 8001d8e:	2a00      	cmp	r2, #0
 8001d90:	d1ef      	bne.n	8001d72 <quorem+0xf0>
 8001d92:	3c01      	subs	r4, #1
 8001d94:	e7ea      	b.n	8001d6c <quorem+0xea>
 8001d96:	2000      	movs	r0, #0
 8001d98:	e7ee      	b.n	8001d78 <quorem+0xf6>
 8001d9a:	0000      	movs	r0, r0
 8001d9c:	0000      	movs	r0, r0
	...

08001da0 <_dtoa_r>:
 8001da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8001da6:	b095      	sub	sp, #84	; 0x54
 8001da8:	4604      	mov	r4, r0
 8001daa:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8001dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001db0:	b93e      	cbnz	r6, 8001dc2 <_dtoa_r+0x22>
 8001db2:	2010      	movs	r0, #16
 8001db4:	f000 fdd6 	bl	8002964 <malloc>
 8001db8:	6260      	str	r0, [r4, #36]	; 0x24
 8001dba:	6046      	str	r6, [r0, #4]
 8001dbc:	6086      	str	r6, [r0, #8]
 8001dbe:	6006      	str	r6, [r0, #0]
 8001dc0:	60c6      	str	r6, [r0, #12]
 8001dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	b151      	cbz	r1, 8001dde <_dtoa_r+0x3e>
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	604a      	str	r2, [r1, #4]
 8001dd0:	608b      	str	r3, [r1, #8]
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	f000 fe0d 	bl	80029f2 <_Bfree>
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	9b03      	ldr	r3, [sp, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bfb7      	itett	lt
 8001de4:	2301      	movlt	r3, #1
 8001de6:	2300      	movge	r3, #0
 8001de8:	602b      	strlt	r3, [r5, #0]
 8001dea:	9b03      	ldrlt	r3, [sp, #12]
 8001dec:	bfae      	itee	ge
 8001dee:	602b      	strge	r3, [r5, #0]
 8001df0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8001df4:	9303      	strlt	r3, [sp, #12]
 8001df6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001dfa:	4bab      	ldr	r3, [pc, #684]	; (80020a8 <_dtoa_r+0x308>)
 8001dfc:	ea33 0309 	bics.w	r3, r3, r9
 8001e00:	d11b      	bne.n	8001e3a <_dtoa_r+0x9a>
 8001e02:	f242 730f 	movw	r3, #9999	; 0x270f
 8001e06:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	9b02      	ldr	r3, [sp, #8]
 8001e0c:	b923      	cbnz	r3, 8001e18 <_dtoa_r+0x78>
 8001e0e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8001e12:	2800      	cmp	r0, #0
 8001e14:	f000 8583 	beq.w	800291e <_dtoa_r+0xb7e>
 8001e18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e1a:	b953      	cbnz	r3, 8001e32 <_dtoa_r+0x92>
 8001e1c:	4ba3      	ldr	r3, [pc, #652]	; (80020ac <_dtoa_r+0x30c>)
 8001e1e:	e021      	b.n	8001e64 <_dtoa_r+0xc4>
 8001e20:	4ba3      	ldr	r3, [pc, #652]	; (80020b0 <_dtoa_r+0x310>)
 8001e22:	9306      	str	r3, [sp, #24]
 8001e24:	3308      	adds	r3, #8
 8001e26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	9806      	ldr	r0, [sp, #24]
 8001e2c:	b015      	add	sp, #84	; 0x54
 8001e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e32:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <_dtoa_r+0x30c>)
 8001e34:	9306      	str	r3, [sp, #24]
 8001e36:	3303      	adds	r3, #3
 8001e38:	e7f5      	b.n	8001e26 <_dtoa_r+0x86>
 8001e3a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2300      	movs	r3, #0
 8001e42:	4630      	mov	r0, r6
 8001e44:	4639      	mov	r1, r7
 8001e46:	f7fe fdc3 	bl	80009d0 <__aeabi_dcmpeq>
 8001e4a:	4680      	mov	r8, r0
 8001e4c:	b160      	cbz	r0, 8001e68 <_dtoa_r+0xc8>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 855e 	beq.w	8002918 <_dtoa_r+0xb78>
 8001e5c:	4b95      	ldr	r3, [pc, #596]	; (80020b4 <_dtoa_r+0x314>)
 8001e5e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	9306      	str	r3, [sp, #24]
 8001e66:	e7e0      	b.n	8001e2a <_dtoa_r+0x8a>
 8001e68:	ab12      	add	r3, sp, #72	; 0x48
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	ab13      	add	r3, sp, #76	; 0x4c
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4632      	mov	r2, r6
 8001e72:	463b      	mov	r3, r7
 8001e74:	4620      	mov	r0, r4
 8001e76:	f001 f809 	bl	8002e8c <__d2b>
 8001e7a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8001e7e:	4682      	mov	sl, r0
 8001e80:	2d00      	cmp	r5, #0
 8001e82:	d07d      	beq.n	8001f80 <_dtoa_r+0x1e0>
 8001e84:	4630      	mov	r0, r6
 8001e86:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8001e8a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8001e8e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8001e92:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8001e96:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4b86      	ldr	r3, [pc, #536]	; (80020b8 <_dtoa_r+0x318>)
 8001e9e:	f7fe f97b 	bl	8000198 <__aeabi_dsub>
 8001ea2:	a37b      	add	r3, pc, #492	; (adr r3, 8002090 <_dtoa_r+0x2f0>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fb2a 	bl	8000500 <__aeabi_dmul>
 8001eac:	a37a      	add	r3, pc, #488	; (adr r3, 8002098 <_dtoa_r+0x2f8>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe f973 	bl	800019c <__adddf3>
 8001eb6:	4606      	mov	r6, r0
 8001eb8:	4628      	mov	r0, r5
 8001eba:	460f      	mov	r7, r1
 8001ebc:	f7fe faba 	bl	8000434 <__aeabi_i2d>
 8001ec0:	a377      	add	r3, pc, #476	; (adr r3, 80020a0 <_dtoa_r+0x300>)
 8001ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec6:	f7fe fb1b 	bl	8000500 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4630      	mov	r0, r6
 8001ed0:	4639      	mov	r1, r7
 8001ed2:	f7fe f963 	bl	800019c <__adddf3>
 8001ed6:	4606      	mov	r6, r0
 8001ed8:	460f      	mov	r7, r1
 8001eda:	f7fe fdc1 	bl	8000a60 <__aeabi_d2iz>
 8001ede:	2200      	movs	r2, #0
 8001ee0:	4683      	mov	fp, r0
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	4639      	mov	r1, r7
 8001ee8:	f7fe fd7c 	bl	80009e4 <__aeabi_dcmplt>
 8001eec:	b158      	cbz	r0, 8001f06 <_dtoa_r+0x166>
 8001eee:	4658      	mov	r0, fp
 8001ef0:	f7fe faa0 	bl	8000434 <__aeabi_i2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4630      	mov	r0, r6
 8001efa:	4639      	mov	r1, r7
 8001efc:	f7fe fd68 	bl	80009d0 <__aeabi_dcmpeq>
 8001f00:	b908      	cbnz	r0, 8001f06 <_dtoa_r+0x166>
 8001f02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001f06:	f1bb 0f16 	cmp.w	fp, #22
 8001f0a:	d858      	bhi.n	8001fbe <_dtoa_r+0x21e>
 8001f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001f10:	496a      	ldr	r1, [pc, #424]	; (80020bc <_dtoa_r+0x31c>)
 8001f12:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8001f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f1a:	f7fe fd81 	bl	8000a20 <__aeabi_dcmpgt>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d04f      	beq.n	8001fc2 <_dtoa_r+0x222>
 8001f22:	2300      	movs	r3, #0
 8001f24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001f28:	930d      	str	r3, [sp, #52]	; 0x34
 8001f2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001f2c:	1b5d      	subs	r5, r3, r5
 8001f2e:	1e6b      	subs	r3, r5, #1
 8001f30:	9307      	str	r3, [sp, #28]
 8001f32:	bf43      	ittte	mi
 8001f34:	2300      	movmi	r3, #0
 8001f36:	f1c5 0801 	rsbmi	r8, r5, #1
 8001f3a:	9307      	strmi	r3, [sp, #28]
 8001f3c:	f04f 0800 	movpl.w	r8, #0
 8001f40:	f1bb 0f00 	cmp.w	fp, #0
 8001f44:	db3f      	blt.n	8001fc6 <_dtoa_r+0x226>
 8001f46:	9b07      	ldr	r3, [sp, #28]
 8001f48:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8001f4c:	445b      	add	r3, fp
 8001f4e:	9307      	str	r3, [sp, #28]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9308      	str	r3, [sp, #32]
 8001f54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001f56:	2b09      	cmp	r3, #9
 8001f58:	f200 80b4 	bhi.w	80020c4 <_dtoa_r+0x324>
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	bfc4      	itt	gt
 8001f60:	3b04      	subgt	r3, #4
 8001f62:	931e      	strgt	r3, [sp, #120]	; 0x78
 8001f64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001f66:	bfc8      	it	gt
 8001f68:	2600      	movgt	r6, #0
 8001f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8001f6e:	bfd8      	it	le
 8001f70:	2601      	movle	r6, #1
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	f200 80b2 	bhi.w	80020dc <_dtoa_r+0x33c>
 8001f78:	e8df f003 	tbb	[pc, r3]
 8001f7c:	782d8684 	.word	0x782d8684
 8001f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001f82:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001f84:	441d      	add	r5, r3
 8001f86:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	dd11      	ble.n	8001fb2 <_dtoa_r+0x212>
 8001f8e:	9a02      	ldr	r2, [sp, #8]
 8001f90:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8001f94:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001f98:	fa22 f000 	lsr.w	r0, r2, r0
 8001f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8001fa0:	4318      	orrs	r0, r3
 8001fa2:	f7fe fa37 	bl	8000414 <__aeabi_ui2d>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8001fac:	3d01      	subs	r5, #1
 8001fae:	9310      	str	r3, [sp, #64]	; 0x40
 8001fb0:	e773      	b.n	8001e9a <_dtoa_r+0xfa>
 8001fb2:	f1c3 0020 	rsb	r0, r3, #32
 8001fb6:	9b02      	ldr	r3, [sp, #8]
 8001fb8:	fa03 f000 	lsl.w	r0, r3, r0
 8001fbc:	e7f1      	b.n	8001fa2 <_dtoa_r+0x202>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e7b2      	b.n	8001f28 <_dtoa_r+0x188>
 8001fc2:	900d      	str	r0, [sp, #52]	; 0x34
 8001fc4:	e7b1      	b.n	8001f2a <_dtoa_r+0x18a>
 8001fc6:	f1cb 0300 	rsb	r3, fp, #0
 8001fca:	9308      	str	r3, [sp, #32]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	eba8 080b 	sub.w	r8, r8, fp
 8001fd2:	930c      	str	r3, [sp, #48]	; 0x30
 8001fd4:	e7be      	b.n	8001f54 <_dtoa_r+0x1b4>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8001fda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f340 8080 	ble.w	80020e2 <_dtoa_r+0x342>
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	9304      	str	r3, [sp, #16]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2104      	movs	r1, #4
 8001fea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001fec:	606a      	str	r2, [r5, #4]
 8001fee:	f101 0214 	add.w	r2, r1, #20
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d97a      	bls.n	80020ec <_dtoa_r+0x34c>
 8001ff6:	6869      	ldr	r1, [r5, #4]
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f000 fcc6 	bl	800298a <_Balloc>
 8001ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002000:	6028      	str	r0, [r5, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f1b9 0f0e 	cmp.w	r9, #14
 8002008:	9306      	str	r3, [sp, #24]
 800200a:	f200 80f0 	bhi.w	80021ee <_dtoa_r+0x44e>
 800200e:	2e00      	cmp	r6, #0
 8002010:	f000 80ed 	beq.w	80021ee <_dtoa_r+0x44e>
 8002014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002018:	f1bb 0f00 	cmp.w	fp, #0
 800201c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002020:	dd79      	ble.n	8002116 <_dtoa_r+0x376>
 8002022:	4a26      	ldr	r2, [pc, #152]	; (80020bc <_dtoa_r+0x31c>)
 8002024:	f00b 030f 	and.w	r3, fp, #15
 8002028:	ea4f 162b 	mov.w	r6, fp, asr #4
 800202c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002030:	06f0      	lsls	r0, r6, #27
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800203a:	d55c      	bpl.n	80020f6 <_dtoa_r+0x356>
 800203c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002040:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <_dtoa_r+0x320>)
 8002042:	2503      	movs	r5, #3
 8002044:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002048:	f7fe fb84 	bl	8000754 <__aeabi_ddiv>
 800204c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002050:	f006 060f 	and.w	r6, r6, #15
 8002054:	4f1a      	ldr	r7, [pc, #104]	; (80020c0 <_dtoa_r+0x320>)
 8002056:	2e00      	cmp	r6, #0
 8002058:	d14f      	bne.n	80020fa <_dtoa_r+0x35a>
 800205a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800205e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002062:	f7fe fb77 	bl	8000754 <__aeabi_ddiv>
 8002066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800206a:	e06e      	b.n	800214a <_dtoa_r+0x3aa>
 800206c:	2301      	movs	r3, #1
 800206e:	9309      	str	r3, [sp, #36]	; 0x24
 8002070:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002072:	445b      	add	r3, fp
 8002074:	f103 0901 	add.w	r9, r3, #1
 8002078:	9304      	str	r3, [sp, #16]
 800207a:	464b      	mov	r3, r9
 800207c:	2b01      	cmp	r3, #1
 800207e:	bfb8      	it	lt
 8002080:	2301      	movlt	r3, #1
 8002082:	e7b0      	b.n	8001fe6 <_dtoa_r+0x246>
 8002084:	2300      	movs	r3, #0
 8002086:	e7a7      	b.n	8001fd8 <_dtoa_r+0x238>
 8002088:	2300      	movs	r3, #0
 800208a:	e7f0      	b.n	800206e <_dtoa_r+0x2ce>
 800208c:	f3af 8000 	nop.w
 8002090:	636f4361 	.word	0x636f4361
 8002094:	3fd287a7 	.word	0x3fd287a7
 8002098:	8b60c8b3 	.word	0x8b60c8b3
 800209c:	3fc68a28 	.word	0x3fc68a28
 80020a0:	509f79fb 	.word	0x509f79fb
 80020a4:	3fd34413 	.word	0x3fd34413
 80020a8:	7ff00000 	.word	0x7ff00000
 80020ac:	080031db 	.word	0x080031db
 80020b0:	080031d2 	.word	0x080031d2
 80020b4:	080031d1 	.word	0x080031d1
 80020b8:	3ff80000 	.word	0x3ff80000
 80020bc:	08003208 	.word	0x08003208
 80020c0:	080031e0 	.word	0x080031e0
 80020c4:	2601      	movs	r6, #1
 80020c6:	2300      	movs	r3, #0
 80020c8:	9609      	str	r6, [sp, #36]	; 0x24
 80020ca:	931e      	str	r3, [sp, #120]	; 0x78
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	2200      	movs	r2, #0
 80020d2:	9304      	str	r3, [sp, #16]
 80020d4:	4699      	mov	r9, r3
 80020d6:	2312      	movs	r3, #18
 80020d8:	921f      	str	r2, [sp, #124]	; 0x7c
 80020da:	e784      	b.n	8001fe6 <_dtoa_r+0x246>
 80020dc:	2301      	movs	r3, #1
 80020de:	9309      	str	r3, [sp, #36]	; 0x24
 80020e0:	e7f4      	b.n	80020cc <_dtoa_r+0x32c>
 80020e2:	2301      	movs	r3, #1
 80020e4:	9304      	str	r3, [sp, #16]
 80020e6:	4699      	mov	r9, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	e7f5      	b.n	80020d8 <_dtoa_r+0x338>
 80020ec:	686a      	ldr	r2, [r5, #4]
 80020ee:	0049      	lsls	r1, r1, #1
 80020f0:	3201      	adds	r2, #1
 80020f2:	606a      	str	r2, [r5, #4]
 80020f4:	e77b      	b.n	8001fee <_dtoa_r+0x24e>
 80020f6:	2502      	movs	r5, #2
 80020f8:	e7ac      	b.n	8002054 <_dtoa_r+0x2b4>
 80020fa:	07f1      	lsls	r1, r6, #31
 80020fc:	d508      	bpl.n	8002110 <_dtoa_r+0x370>
 80020fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002106:	f7fe f9fb 	bl	8000500 <__aeabi_dmul>
 800210a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800210e:	3501      	adds	r5, #1
 8002110:	1076      	asrs	r6, r6, #1
 8002112:	3708      	adds	r7, #8
 8002114:	e79f      	b.n	8002056 <_dtoa_r+0x2b6>
 8002116:	f000 80a5 	beq.w	8002264 <_dtoa_r+0x4c4>
 800211a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800211e:	f1cb 0600 	rsb	r6, fp, #0
 8002122:	4ba2      	ldr	r3, [pc, #648]	; (80023ac <_dtoa_r+0x60c>)
 8002124:	f006 020f 	and.w	r2, r6, #15
 8002128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe f9e6 	bl	8000500 <__aeabi_dmul>
 8002134:	2502      	movs	r5, #2
 8002136:	2300      	movs	r3, #0
 8002138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800213c:	4f9c      	ldr	r7, [pc, #624]	; (80023b0 <_dtoa_r+0x610>)
 800213e:	1136      	asrs	r6, r6, #4
 8002140:	2e00      	cmp	r6, #0
 8002142:	f040 8084 	bne.w	800224e <_dtoa_r+0x4ae>
 8002146:	2b00      	cmp	r3, #0
 8002148:	d18d      	bne.n	8002066 <_dtoa_r+0x2c6>
 800214a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 808b 	beq.w	8002268 <_dtoa_r+0x4c8>
 8002152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002156:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800215a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800215e:	2200      	movs	r2, #0
 8002160:	4b94      	ldr	r3, [pc, #592]	; (80023b4 <_dtoa_r+0x614>)
 8002162:	f7fe fc3f 	bl	80009e4 <__aeabi_dcmplt>
 8002166:	2800      	cmp	r0, #0
 8002168:	d07e      	beq.n	8002268 <_dtoa_r+0x4c8>
 800216a:	f1b9 0f00 	cmp.w	r9, #0
 800216e:	d07b      	beq.n	8002268 <_dtoa_r+0x4c8>
 8002170:	9b04      	ldr	r3, [sp, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	dd37      	ble.n	80021e6 <_dtoa_r+0x446>
 8002176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800217a:	2200      	movs	r2, #0
 800217c:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <_dtoa_r+0x618>)
 800217e:	f7fe f9bf 	bl	8000500 <__aeabi_dmul>
 8002182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002186:	9e04      	ldr	r6, [sp, #16]
 8002188:	f10b 37ff 	add.w	r7, fp, #4294967295
 800218c:	3501      	adds	r5, #1
 800218e:	4628      	mov	r0, r5
 8002190:	f7fe f950 	bl	8000434 <__aeabi_i2d>
 8002194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002198:	f7fe f9b2 	bl	8000500 <__aeabi_dmul>
 800219c:	4b87      	ldr	r3, [pc, #540]	; (80023bc <_dtoa_r+0x61c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	f7fd fffc 	bl	800019c <__adddf3>
 80021a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80021a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80021aa:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 80021ae:	950b      	str	r5, [sp, #44]	; 0x2c
 80021b0:	2e00      	cmp	r6, #0
 80021b2:	d15c      	bne.n	800226e <_dtoa_r+0x4ce>
 80021b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80021b8:	2200      	movs	r2, #0
 80021ba:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <_dtoa_r+0x620>)
 80021bc:	f7fd ffec 	bl	8000198 <__aeabi_dsub>
 80021c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021c2:	462b      	mov	r3, r5
 80021c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021c8:	f7fe fc2a 	bl	8000a20 <__aeabi_dcmpgt>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	f040 82f7 	bne.w	80027c0 <_dtoa_r+0xa20>
 80021d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80021d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80021dc:	f7fe fc02 	bl	80009e4 <__aeabi_dcmplt>
 80021e0:	2800      	cmp	r0, #0
 80021e2:	f040 82eb 	bne.w	80027bc <_dtoa_r+0xa1c>
 80021e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80021ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f2c0 8150 	blt.w	8002496 <_dtoa_r+0x6f6>
 80021f6:	f1bb 0f0e 	cmp.w	fp, #14
 80021fa:	f300 814c 	bgt.w	8002496 <_dtoa_r+0x6f6>
 80021fe:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <_dtoa_r+0x60c>)
 8002200:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800220c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800220e:	2b00      	cmp	r3, #0
 8002210:	f280 80da 	bge.w	80023c8 <_dtoa_r+0x628>
 8002214:	f1b9 0f00 	cmp.w	r9, #0
 8002218:	f300 80d6 	bgt.w	80023c8 <_dtoa_r+0x628>
 800221c:	f040 82cd 	bne.w	80027ba <_dtoa_r+0xa1a>
 8002220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002224:	2200      	movs	r2, #0
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <_dtoa_r+0x620>)
 8002228:	f7fe f96a 	bl	8000500 <__aeabi_dmul>
 800222c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002230:	f7fe fbec 	bl	8000a0c <__aeabi_dcmpge>
 8002234:	464e      	mov	r6, r9
 8002236:	464f      	mov	r7, r9
 8002238:	2800      	cmp	r0, #0
 800223a:	f040 82a4 	bne.w	8002786 <_dtoa_r+0x9e6>
 800223e:	9b06      	ldr	r3, [sp, #24]
 8002240:	9a06      	ldr	r2, [sp, #24]
 8002242:	1c5d      	adds	r5, r3, #1
 8002244:	2331      	movs	r3, #49	; 0x31
 8002246:	f10b 0b01 	add.w	fp, fp, #1
 800224a:	7013      	strb	r3, [r2, #0]
 800224c:	e29f      	b.n	800278e <_dtoa_r+0x9ee>
 800224e:	07f2      	lsls	r2, r6, #31
 8002250:	d505      	bpl.n	800225e <_dtoa_r+0x4be>
 8002252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002256:	f7fe f953 	bl	8000500 <__aeabi_dmul>
 800225a:	2301      	movs	r3, #1
 800225c:	3501      	adds	r5, #1
 800225e:	1076      	asrs	r6, r6, #1
 8002260:	3708      	adds	r7, #8
 8002262:	e76d      	b.n	8002140 <_dtoa_r+0x3a0>
 8002264:	2502      	movs	r5, #2
 8002266:	e770      	b.n	800214a <_dtoa_r+0x3aa>
 8002268:	465f      	mov	r7, fp
 800226a:	464e      	mov	r6, r9
 800226c:	e78f      	b.n	800218e <_dtoa_r+0x3ee>
 800226e:	9a06      	ldr	r2, [sp, #24]
 8002270:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <_dtoa_r+0x60c>)
 8002272:	4432      	add	r2, r6
 8002274:	9211      	str	r2, [sp, #68]	; 0x44
 8002276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002278:	1e71      	subs	r1, r6, #1
 800227a:	2a00      	cmp	r2, #0
 800227c:	d048      	beq.n	8002310 <_dtoa_r+0x570>
 800227e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	2000      	movs	r0, #0
 8002288:	494e      	ldr	r1, [pc, #312]	; (80023c4 <_dtoa_r+0x624>)
 800228a:	f7fe fa63 	bl	8000754 <__aeabi_ddiv>
 800228e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002292:	f7fd ff81 	bl	8000198 <__aeabi_dsub>
 8002296:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800229a:	9d06      	ldr	r5, [sp, #24]
 800229c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022a0:	f7fe fbde 	bl	8000a60 <__aeabi_d2iz>
 80022a4:	4606      	mov	r6, r0
 80022a6:	f7fe f8c5 	bl	8000434 <__aeabi_i2d>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80022b2:	f7fd ff71 	bl	8000198 <__aeabi_dsub>
 80022b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80022ba:	3630      	adds	r6, #48	; 0x30
 80022bc:	f805 6b01 	strb.w	r6, [r5], #1
 80022c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80022c4:	f7fe fb8e 	bl	80009e4 <__aeabi_dcmplt>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d164      	bne.n	8002396 <_dtoa_r+0x5f6>
 80022cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80022d0:	2000      	movs	r0, #0
 80022d2:	4938      	ldr	r1, [pc, #224]	; (80023b4 <_dtoa_r+0x614>)
 80022d4:	f7fd ff60 	bl	8000198 <__aeabi_dsub>
 80022d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80022dc:	f7fe fb82 	bl	80009e4 <__aeabi_dcmplt>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	f040 80b9 	bne.w	8002458 <_dtoa_r+0x6b8>
 80022e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80022e8:	429d      	cmp	r5, r3
 80022ea:	f43f af7c 	beq.w	80021e6 <_dtoa_r+0x446>
 80022ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80022f2:	2200      	movs	r2, #0
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <_dtoa_r+0x618>)
 80022f6:	f7fe f903 	bl	8000500 <__aeabi_dmul>
 80022fa:	2200      	movs	r2, #0
 80022fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002304:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <_dtoa_r+0x618>)
 8002306:	f7fe f8fb 	bl	8000500 <__aeabi_dmul>
 800230a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800230e:	e7c5      	b.n	800229c <_dtoa_r+0x4fc>
 8002310:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002318:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800231c:	f7fe f8f0 	bl	8000500 <__aeabi_dmul>
 8002320:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002324:	9d06      	ldr	r5, [sp, #24]
 8002326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800232a:	f7fe fb99 	bl	8000a60 <__aeabi_d2iz>
 800232e:	4606      	mov	r6, r0
 8002330:	f7fe f880 	bl	8000434 <__aeabi_i2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800233c:	f7fd ff2c 	bl	8000198 <__aeabi_dsub>
 8002340:	3630      	adds	r6, #48	; 0x30
 8002342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002344:	f805 6b01 	strb.w	r6, [r5], #1
 8002348:	42ab      	cmp	r3, r5
 800234a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	d124      	bne.n	800239e <_dtoa_r+0x5fe>
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <_dtoa_r+0x624>)
 8002356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800235a:	f7fd ff1f 	bl	800019c <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002366:	f7fe fb5b 	bl	8000a20 <__aeabi_dcmpgt>
 800236a:	2800      	cmp	r0, #0
 800236c:	d174      	bne.n	8002458 <_dtoa_r+0x6b8>
 800236e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002372:	2000      	movs	r0, #0
 8002374:	4913      	ldr	r1, [pc, #76]	; (80023c4 <_dtoa_r+0x624>)
 8002376:	f7fd ff0f 	bl	8000198 <__aeabi_dsub>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002382:	f7fe fb2f 	bl	80009e4 <__aeabi_dcmplt>
 8002386:	2800      	cmp	r0, #0
 8002388:	f43f af2d 	beq.w	80021e6 <_dtoa_r+0x446>
 800238c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002390:	1e6a      	subs	r2, r5, #1
 8002392:	2b30      	cmp	r3, #48	; 0x30
 8002394:	d001      	beq.n	800239a <_dtoa_r+0x5fa>
 8002396:	46bb      	mov	fp, r7
 8002398:	e04d      	b.n	8002436 <_dtoa_r+0x696>
 800239a:	4615      	mov	r5, r2
 800239c:	e7f6      	b.n	800238c <_dtoa_r+0x5ec>
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <_dtoa_r+0x618>)
 80023a0:	f7fe f8ae 	bl	8000500 <__aeabi_dmul>
 80023a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80023a8:	e7bd      	b.n	8002326 <_dtoa_r+0x586>
 80023aa:	bf00      	nop
 80023ac:	08003208 	.word	0x08003208
 80023b0:	080031e0 	.word	0x080031e0
 80023b4:	3ff00000 	.word	0x3ff00000
 80023b8:	40240000 	.word	0x40240000
 80023bc:	401c0000 	.word	0x401c0000
 80023c0:	40140000 	.word	0x40140000
 80023c4:	3fe00000 	.word	0x3fe00000
 80023c8:	9d06      	ldr	r5, [sp, #24]
 80023ca:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80023ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80023d2:	4630      	mov	r0, r6
 80023d4:	4639      	mov	r1, r7
 80023d6:	f7fe f9bd 	bl	8000754 <__aeabi_ddiv>
 80023da:	f7fe fb41 	bl	8000a60 <__aeabi_d2iz>
 80023de:	4680      	mov	r8, r0
 80023e0:	f7fe f828 	bl	8000434 <__aeabi_i2d>
 80023e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80023e8:	f7fe f88a 	bl	8000500 <__aeabi_dmul>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4630      	mov	r0, r6
 80023f2:	4639      	mov	r1, r7
 80023f4:	f7fd fed0 	bl	8000198 <__aeabi_dsub>
 80023f8:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80023fc:	f805 6b01 	strb.w	r6, [r5], #1
 8002400:	9e06      	ldr	r6, [sp, #24]
 8002402:	4602      	mov	r2, r0
 8002404:	1bae      	subs	r6, r5, r6
 8002406:	45b1      	cmp	r9, r6
 8002408:	460b      	mov	r3, r1
 800240a:	d137      	bne.n	800247c <_dtoa_r+0x6dc>
 800240c:	f7fd fec6 	bl	800019c <__adddf3>
 8002410:	4606      	mov	r6, r0
 8002412:	460f      	mov	r7, r1
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800241c:	f7fe fae2 	bl	80009e4 <__aeabi_dcmplt>
 8002420:	b9c8      	cbnz	r0, 8002456 <_dtoa_r+0x6b6>
 8002422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002426:	4632      	mov	r2, r6
 8002428:	463b      	mov	r3, r7
 800242a:	f7fe fad1 	bl	80009d0 <__aeabi_dcmpeq>
 800242e:	b110      	cbz	r0, 8002436 <_dtoa_r+0x696>
 8002430:	f018 0f01 	tst.w	r8, #1
 8002434:	d10f      	bne.n	8002456 <_dtoa_r+0x6b6>
 8002436:	4651      	mov	r1, sl
 8002438:	4620      	mov	r0, r4
 800243a:	f000 fada 	bl	80029f2 <_Bfree>
 800243e:	2300      	movs	r3, #0
 8002440:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002442:	702b      	strb	r3, [r5, #0]
 8002444:	f10b 0301 	add.w	r3, fp, #1
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800244c:	2b00      	cmp	r3, #0
 800244e:	f43f acec 	beq.w	8001e2a <_dtoa_r+0x8a>
 8002452:	601d      	str	r5, [r3, #0]
 8002454:	e4e9      	b.n	8001e2a <_dtoa_r+0x8a>
 8002456:	465f      	mov	r7, fp
 8002458:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800245c:	1e6b      	subs	r3, r5, #1
 800245e:	2a39      	cmp	r2, #57	; 0x39
 8002460:	d106      	bne.n	8002470 <_dtoa_r+0x6d0>
 8002462:	9a06      	ldr	r2, [sp, #24]
 8002464:	429a      	cmp	r2, r3
 8002466:	d107      	bne.n	8002478 <_dtoa_r+0x6d8>
 8002468:	2330      	movs	r3, #48	; 0x30
 800246a:	7013      	strb	r3, [r2, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	3701      	adds	r7, #1
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	3201      	adds	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	e78e      	b.n	8002396 <_dtoa_r+0x5f6>
 8002478:	461d      	mov	r5, r3
 800247a:	e7ed      	b.n	8002458 <_dtoa_r+0x6b8>
 800247c:	2200      	movs	r2, #0
 800247e:	4bb5      	ldr	r3, [pc, #724]	; (8002754 <_dtoa_r+0x9b4>)
 8002480:	f7fe f83e 	bl	8000500 <__aeabi_dmul>
 8002484:	2200      	movs	r2, #0
 8002486:	2300      	movs	r3, #0
 8002488:	4606      	mov	r6, r0
 800248a:	460f      	mov	r7, r1
 800248c:	f7fe faa0 	bl	80009d0 <__aeabi_dcmpeq>
 8002490:	2800      	cmp	r0, #0
 8002492:	d09c      	beq.n	80023ce <_dtoa_r+0x62e>
 8002494:	e7cf      	b.n	8002436 <_dtoa_r+0x696>
 8002496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002498:	2a00      	cmp	r2, #0
 800249a:	f000 8129 	beq.w	80026f0 <_dtoa_r+0x950>
 800249e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80024a0:	2a01      	cmp	r2, #1
 80024a2:	f300 810e 	bgt.w	80026c2 <_dtoa_r+0x922>
 80024a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	f000 8106 	beq.w	80026ba <_dtoa_r+0x91a>
 80024ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80024b2:	4645      	mov	r5, r8
 80024b4:	9e08      	ldr	r6, [sp, #32]
 80024b6:	9a07      	ldr	r2, [sp, #28]
 80024b8:	2101      	movs	r1, #1
 80024ba:	441a      	add	r2, r3
 80024bc:	4620      	mov	r0, r4
 80024be:	4498      	add	r8, r3
 80024c0:	9207      	str	r2, [sp, #28]
 80024c2:	f000 fb36 	bl	8002b32 <__i2b>
 80024c6:	4607      	mov	r7, r0
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	dd0b      	ble.n	80024e4 <_dtoa_r+0x744>
 80024cc:	9b07      	ldr	r3, [sp, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	dd08      	ble.n	80024e4 <_dtoa_r+0x744>
 80024d2:	42ab      	cmp	r3, r5
 80024d4:	bfa8      	it	ge
 80024d6:	462b      	movge	r3, r5
 80024d8:	9a07      	ldr	r2, [sp, #28]
 80024da:	eba8 0803 	sub.w	r8, r8, r3
 80024de:	1aed      	subs	r5, r5, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	9307      	str	r3, [sp, #28]
 80024e4:	9b08      	ldr	r3, [sp, #32]
 80024e6:	b1fb      	cbz	r3, 8002528 <_dtoa_r+0x788>
 80024e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8104 	beq.w	80026f8 <_dtoa_r+0x958>
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	dd11      	ble.n	8002518 <_dtoa_r+0x778>
 80024f4:	4639      	mov	r1, r7
 80024f6:	4632      	mov	r2, r6
 80024f8:	4620      	mov	r0, r4
 80024fa:	f000 fbaf 	bl	8002c5c <__pow5mult>
 80024fe:	4652      	mov	r2, sl
 8002500:	4601      	mov	r1, r0
 8002502:	4607      	mov	r7, r0
 8002504:	4620      	mov	r0, r4
 8002506:	f000 fb1d 	bl	8002b44 <__multiply>
 800250a:	4651      	mov	r1, sl
 800250c:	900a      	str	r0, [sp, #40]	; 0x28
 800250e:	4620      	mov	r0, r4
 8002510:	f000 fa6f 	bl	80029f2 <_Bfree>
 8002514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002516:	469a      	mov	sl, r3
 8002518:	9b08      	ldr	r3, [sp, #32]
 800251a:	1b9a      	subs	r2, r3, r6
 800251c:	d004      	beq.n	8002528 <_dtoa_r+0x788>
 800251e:	4651      	mov	r1, sl
 8002520:	4620      	mov	r0, r4
 8002522:	f000 fb9b 	bl	8002c5c <__pow5mult>
 8002526:	4682      	mov	sl, r0
 8002528:	2101      	movs	r1, #1
 800252a:	4620      	mov	r0, r4
 800252c:	f000 fb01 	bl	8002b32 <__i2b>
 8002530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002532:	4606      	mov	r6, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f340 80e1 	ble.w	80026fc <_dtoa_r+0x95c>
 800253a:	461a      	mov	r2, r3
 800253c:	4601      	mov	r1, r0
 800253e:	4620      	mov	r0, r4
 8002540:	f000 fb8c 	bl	8002c5c <__pow5mult>
 8002544:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002546:	4606      	mov	r6, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	f340 80da 	ble.w	8002702 <_dtoa_r+0x962>
 800254e:	2300      	movs	r3, #0
 8002550:	9308      	str	r3, [sp, #32]
 8002552:	6933      	ldr	r3, [r6, #16]
 8002554:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002558:	6918      	ldr	r0, [r3, #16]
 800255a:	f000 fa9c 	bl	8002a96 <__hi0bits>
 800255e:	f1c0 0020 	rsb	r0, r0, #32
 8002562:	9b07      	ldr	r3, [sp, #28]
 8002564:	4418      	add	r0, r3
 8002566:	f010 001f 	ands.w	r0, r0, #31
 800256a:	f000 80f0 	beq.w	800274e <_dtoa_r+0x9ae>
 800256e:	f1c0 0320 	rsb	r3, r0, #32
 8002572:	2b04      	cmp	r3, #4
 8002574:	f340 80e2 	ble.w	800273c <_dtoa_r+0x99c>
 8002578:	9b07      	ldr	r3, [sp, #28]
 800257a:	f1c0 001c 	rsb	r0, r0, #28
 800257e:	4480      	add	r8, r0
 8002580:	4405      	add	r5, r0
 8002582:	4403      	add	r3, r0
 8002584:	9307      	str	r3, [sp, #28]
 8002586:	f1b8 0f00 	cmp.w	r8, #0
 800258a:	dd05      	ble.n	8002598 <_dtoa_r+0x7f8>
 800258c:	4651      	mov	r1, sl
 800258e:	4642      	mov	r2, r8
 8002590:	4620      	mov	r0, r4
 8002592:	f000 fbb1 	bl	8002cf8 <__lshift>
 8002596:	4682      	mov	sl, r0
 8002598:	9b07      	ldr	r3, [sp, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	dd05      	ble.n	80025aa <_dtoa_r+0x80a>
 800259e:	4631      	mov	r1, r6
 80025a0:	461a      	mov	r2, r3
 80025a2:	4620      	mov	r0, r4
 80025a4:	f000 fba8 	bl	8002cf8 <__lshift>
 80025a8:	4606      	mov	r6, r0
 80025aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80d3 	beq.w	8002758 <_dtoa_r+0x9b8>
 80025b2:	4631      	mov	r1, r6
 80025b4:	4650      	mov	r0, sl
 80025b6:	f000 fbf0 	bl	8002d9a <__mcmp>
 80025ba:	2800      	cmp	r0, #0
 80025bc:	f280 80cc 	bge.w	8002758 <_dtoa_r+0x9b8>
 80025c0:	2300      	movs	r3, #0
 80025c2:	4651      	mov	r1, sl
 80025c4:	220a      	movs	r2, #10
 80025c6:	4620      	mov	r0, r4
 80025c8:	f000 fa2a 	bl	8002a20 <__multadd>
 80025cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80025d2:	4682      	mov	sl, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 81a9 	beq.w	800292c <_dtoa_r+0xb8c>
 80025da:	2300      	movs	r3, #0
 80025dc:	4639      	mov	r1, r7
 80025de:	220a      	movs	r2, #10
 80025e0:	4620      	mov	r0, r4
 80025e2:	f000 fa1d 	bl	8002a20 <__multadd>
 80025e6:	9b04      	ldr	r3, [sp, #16]
 80025e8:	4607      	mov	r7, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	dc03      	bgt.n	80025f6 <_dtoa_r+0x856>
 80025ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	f300 80b9 	bgt.w	8002768 <_dtoa_r+0x9c8>
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	dd05      	ble.n	8002606 <_dtoa_r+0x866>
 80025fa:	4639      	mov	r1, r7
 80025fc:	462a      	mov	r2, r5
 80025fe:	4620      	mov	r0, r4
 8002600:	f000 fb7a 	bl	8002cf8 <__lshift>
 8002604:	4607      	mov	r7, r0
 8002606:	9b08      	ldr	r3, [sp, #32]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8110 	beq.w	800282e <_dtoa_r+0xa8e>
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4620      	mov	r0, r4
 8002612:	f000 f9ba 	bl	800298a <_Balloc>
 8002616:	4605      	mov	r5, r0
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	f107 010c 	add.w	r1, r7, #12
 800261e:	3202      	adds	r2, #2
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	300c      	adds	r0, #12
 8002624:	f000 f9a6 	bl	8002974 <memcpy>
 8002628:	2201      	movs	r2, #1
 800262a:	4629      	mov	r1, r5
 800262c:	4620      	mov	r0, r4
 800262e:	f000 fb63 	bl	8002cf8 <__lshift>
 8002632:	9707      	str	r7, [sp, #28]
 8002634:	4607      	mov	r7, r0
 8002636:	9b02      	ldr	r3, [sp, #8]
 8002638:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	9308      	str	r3, [sp, #32]
 8002642:	4631      	mov	r1, r6
 8002644:	4650      	mov	r0, sl
 8002646:	f7ff fb1c 	bl	8001c82 <quorem>
 800264a:	9907      	ldr	r1, [sp, #28]
 800264c:	4605      	mov	r5, r0
 800264e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8002652:	4650      	mov	r0, sl
 8002654:	f000 fba1 	bl	8002d9a <__mcmp>
 8002658:	463a      	mov	r2, r7
 800265a:	9002      	str	r0, [sp, #8]
 800265c:	4631      	mov	r1, r6
 800265e:	4620      	mov	r0, r4
 8002660:	f000 fbb5 	bl	8002dce <__mdiff>
 8002664:	68c3      	ldr	r3, [r0, #12]
 8002666:	4602      	mov	r2, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 80e2 	bne.w	8002832 <_dtoa_r+0xa92>
 800266e:	4601      	mov	r1, r0
 8002670:	9009      	str	r0, [sp, #36]	; 0x24
 8002672:	4650      	mov	r0, sl
 8002674:	f000 fb91 	bl	8002d9a <__mcmp>
 8002678:	4603      	mov	r3, r0
 800267a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800267c:	4611      	mov	r1, r2
 800267e:	4620      	mov	r0, r4
 8002680:	9309      	str	r3, [sp, #36]	; 0x24
 8002682:	f000 f9b6 	bl	80029f2 <_Bfree>
 8002686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 80d4 	bne.w	8002836 <_dtoa_r+0xa96>
 800268e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002690:	2a00      	cmp	r2, #0
 8002692:	f040 80d0 	bne.w	8002836 <_dtoa_r+0xa96>
 8002696:	9a08      	ldr	r2, [sp, #32]
 8002698:	2a00      	cmp	r2, #0
 800269a:	f040 80cc 	bne.w	8002836 <_dtoa_r+0xa96>
 800269e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80026a2:	f000 80e8 	beq.w	8002876 <_dtoa_r+0xad6>
 80026a6:	9b02      	ldr	r3, [sp, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	dd01      	ble.n	80026b0 <_dtoa_r+0x910>
 80026ac:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80026b0:	f108 0501 	add.w	r5, r8, #1
 80026b4:	f888 9000 	strb.w	r9, [r8]
 80026b8:	e06b      	b.n	8002792 <_dtoa_r+0x9f2>
 80026ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80026bc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80026c0:	e6f7      	b.n	80024b2 <_dtoa_r+0x712>
 80026c2:	9b08      	ldr	r3, [sp, #32]
 80026c4:	f109 36ff 	add.w	r6, r9, #4294967295
 80026c8:	42b3      	cmp	r3, r6
 80026ca:	bfb7      	itett	lt
 80026cc:	9b08      	ldrlt	r3, [sp, #32]
 80026ce:	1b9e      	subge	r6, r3, r6
 80026d0:	1af2      	sublt	r2, r6, r3
 80026d2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80026d4:	bfbf      	itttt	lt
 80026d6:	9608      	strlt	r6, [sp, #32]
 80026d8:	189b      	addlt	r3, r3, r2
 80026da:	930c      	strlt	r3, [sp, #48]	; 0x30
 80026dc:	2600      	movlt	r6, #0
 80026de:	f1b9 0f00 	cmp.w	r9, #0
 80026e2:	bfb9      	ittee	lt
 80026e4:	eba8 0509 	sublt.w	r5, r8, r9
 80026e8:	2300      	movlt	r3, #0
 80026ea:	4645      	movge	r5, r8
 80026ec:	464b      	movge	r3, r9
 80026ee:	e6e2      	b.n	80024b6 <_dtoa_r+0x716>
 80026f0:	9e08      	ldr	r6, [sp, #32]
 80026f2:	4645      	mov	r5, r8
 80026f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80026f6:	e6e7      	b.n	80024c8 <_dtoa_r+0x728>
 80026f8:	9a08      	ldr	r2, [sp, #32]
 80026fa:	e710      	b.n	800251e <_dtoa_r+0x77e>
 80026fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80026fe:	2b01      	cmp	r3, #1
 8002700:	dc18      	bgt.n	8002734 <_dtoa_r+0x994>
 8002702:	9b02      	ldr	r3, [sp, #8]
 8002704:	b9b3      	cbnz	r3, 8002734 <_dtoa_r+0x994>
 8002706:	9b03      	ldr	r3, [sp, #12]
 8002708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800270c:	b9a3      	cbnz	r3, 8002738 <_dtoa_r+0x998>
 800270e:	9b03      	ldr	r3, [sp, #12]
 8002710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002714:	0d1b      	lsrs	r3, r3, #20
 8002716:	051b      	lsls	r3, r3, #20
 8002718:	b12b      	cbz	r3, 8002726 <_dtoa_r+0x986>
 800271a:	9b07      	ldr	r3, [sp, #28]
 800271c:	f108 0801 	add.w	r8, r8, #1
 8002720:	3301      	adds	r3, #1
 8002722:	9307      	str	r3, [sp, #28]
 8002724:	2301      	movs	r3, #1
 8002726:	9308      	str	r3, [sp, #32]
 8002728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800272a:	2b00      	cmp	r3, #0
 800272c:	f47f af11 	bne.w	8002552 <_dtoa_r+0x7b2>
 8002730:	2001      	movs	r0, #1
 8002732:	e716      	b.n	8002562 <_dtoa_r+0x7c2>
 8002734:	2300      	movs	r3, #0
 8002736:	e7f6      	b.n	8002726 <_dtoa_r+0x986>
 8002738:	9b02      	ldr	r3, [sp, #8]
 800273a:	e7f4      	b.n	8002726 <_dtoa_r+0x986>
 800273c:	f43f af23 	beq.w	8002586 <_dtoa_r+0x7e6>
 8002740:	9a07      	ldr	r2, [sp, #28]
 8002742:	331c      	adds	r3, #28
 8002744:	441a      	add	r2, r3
 8002746:	4498      	add	r8, r3
 8002748:	441d      	add	r5, r3
 800274a:	4613      	mov	r3, r2
 800274c:	e71a      	b.n	8002584 <_dtoa_r+0x7e4>
 800274e:	4603      	mov	r3, r0
 8002750:	e7f6      	b.n	8002740 <_dtoa_r+0x9a0>
 8002752:	bf00      	nop
 8002754:	40240000 	.word	0x40240000
 8002758:	f1b9 0f00 	cmp.w	r9, #0
 800275c:	dc33      	bgt.n	80027c6 <_dtoa_r+0xa26>
 800275e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002760:	2b02      	cmp	r3, #2
 8002762:	dd30      	ble.n	80027c6 <_dtoa_r+0xa26>
 8002764:	f8cd 9010 	str.w	r9, [sp, #16]
 8002768:	9b04      	ldr	r3, [sp, #16]
 800276a:	b963      	cbnz	r3, 8002786 <_dtoa_r+0x9e6>
 800276c:	4631      	mov	r1, r6
 800276e:	2205      	movs	r2, #5
 8002770:	4620      	mov	r0, r4
 8002772:	f000 f955 	bl	8002a20 <__multadd>
 8002776:	4601      	mov	r1, r0
 8002778:	4606      	mov	r6, r0
 800277a:	4650      	mov	r0, sl
 800277c:	f000 fb0d 	bl	8002d9a <__mcmp>
 8002780:	2800      	cmp	r0, #0
 8002782:	f73f ad5c 	bgt.w	800223e <_dtoa_r+0x49e>
 8002786:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002788:	9d06      	ldr	r5, [sp, #24]
 800278a:	ea6f 0b03 	mvn.w	fp, r3
 800278e:	2300      	movs	r3, #0
 8002790:	9307      	str	r3, [sp, #28]
 8002792:	4631      	mov	r1, r6
 8002794:	4620      	mov	r0, r4
 8002796:	f000 f92c 	bl	80029f2 <_Bfree>
 800279a:	2f00      	cmp	r7, #0
 800279c:	f43f ae4b 	beq.w	8002436 <_dtoa_r+0x696>
 80027a0:	9b07      	ldr	r3, [sp, #28]
 80027a2:	b12b      	cbz	r3, 80027b0 <_dtoa_r+0xa10>
 80027a4:	42bb      	cmp	r3, r7
 80027a6:	d003      	beq.n	80027b0 <_dtoa_r+0xa10>
 80027a8:	4619      	mov	r1, r3
 80027aa:	4620      	mov	r0, r4
 80027ac:	f000 f921 	bl	80029f2 <_Bfree>
 80027b0:	4639      	mov	r1, r7
 80027b2:	4620      	mov	r0, r4
 80027b4:	f000 f91d 	bl	80029f2 <_Bfree>
 80027b8:	e63d      	b.n	8002436 <_dtoa_r+0x696>
 80027ba:	2600      	movs	r6, #0
 80027bc:	4637      	mov	r7, r6
 80027be:	e7e2      	b.n	8002786 <_dtoa_r+0x9e6>
 80027c0:	46bb      	mov	fp, r7
 80027c2:	4637      	mov	r7, r6
 80027c4:	e53b      	b.n	800223e <_dtoa_r+0x49e>
 80027c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027c8:	f8cd 9010 	str.w	r9, [sp, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af12 	bne.w	80025f6 <_dtoa_r+0x856>
 80027d2:	9d06      	ldr	r5, [sp, #24]
 80027d4:	4631      	mov	r1, r6
 80027d6:	4650      	mov	r0, sl
 80027d8:	f7ff fa53 	bl	8001c82 <quorem>
 80027dc:	9b06      	ldr	r3, [sp, #24]
 80027de:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80027e2:	f805 9b01 	strb.w	r9, [r5], #1
 80027e6:	9a04      	ldr	r2, [sp, #16]
 80027e8:	1aeb      	subs	r3, r5, r3
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f300 8081 	bgt.w	80028f2 <_dtoa_r+0xb52>
 80027f0:	9b06      	ldr	r3, [sp, #24]
 80027f2:	2a01      	cmp	r2, #1
 80027f4:	bfac      	ite	ge
 80027f6:	189b      	addge	r3, r3, r2
 80027f8:	3301      	addlt	r3, #1
 80027fa:	4698      	mov	r8, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	9307      	str	r3, [sp, #28]
 8002800:	4651      	mov	r1, sl
 8002802:	2201      	movs	r2, #1
 8002804:	4620      	mov	r0, r4
 8002806:	f000 fa77 	bl	8002cf8 <__lshift>
 800280a:	4631      	mov	r1, r6
 800280c:	4682      	mov	sl, r0
 800280e:	f000 fac4 	bl	8002d9a <__mcmp>
 8002812:	2800      	cmp	r0, #0
 8002814:	dc34      	bgt.n	8002880 <_dtoa_r+0xae0>
 8002816:	d102      	bne.n	800281e <_dtoa_r+0xa7e>
 8002818:	f019 0f01 	tst.w	r9, #1
 800281c:	d130      	bne.n	8002880 <_dtoa_r+0xae0>
 800281e:	4645      	mov	r5, r8
 8002820:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002824:	1e6a      	subs	r2, r5, #1
 8002826:	2b30      	cmp	r3, #48	; 0x30
 8002828:	d1b3      	bne.n	8002792 <_dtoa_r+0x9f2>
 800282a:	4615      	mov	r5, r2
 800282c:	e7f8      	b.n	8002820 <_dtoa_r+0xa80>
 800282e:	4638      	mov	r0, r7
 8002830:	e6ff      	b.n	8002632 <_dtoa_r+0x892>
 8002832:	2301      	movs	r3, #1
 8002834:	e722      	b.n	800267c <_dtoa_r+0x8dc>
 8002836:	9a02      	ldr	r2, [sp, #8]
 8002838:	2a00      	cmp	r2, #0
 800283a:	db04      	blt.n	8002846 <_dtoa_r+0xaa6>
 800283c:	d128      	bne.n	8002890 <_dtoa_r+0xaf0>
 800283e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002840:	bb32      	cbnz	r2, 8002890 <_dtoa_r+0xaf0>
 8002842:	9a08      	ldr	r2, [sp, #32]
 8002844:	bb22      	cbnz	r2, 8002890 <_dtoa_r+0xaf0>
 8002846:	2b00      	cmp	r3, #0
 8002848:	f77f af32 	ble.w	80026b0 <_dtoa_r+0x910>
 800284c:	4651      	mov	r1, sl
 800284e:	2201      	movs	r2, #1
 8002850:	4620      	mov	r0, r4
 8002852:	f000 fa51 	bl	8002cf8 <__lshift>
 8002856:	4631      	mov	r1, r6
 8002858:	4682      	mov	sl, r0
 800285a:	f000 fa9e 	bl	8002d9a <__mcmp>
 800285e:	2800      	cmp	r0, #0
 8002860:	dc05      	bgt.n	800286e <_dtoa_r+0xace>
 8002862:	f47f af25 	bne.w	80026b0 <_dtoa_r+0x910>
 8002866:	f019 0f01 	tst.w	r9, #1
 800286a:	f43f af21 	beq.w	80026b0 <_dtoa_r+0x910>
 800286e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8002872:	f47f af1b 	bne.w	80026ac <_dtoa_r+0x90c>
 8002876:	2339      	movs	r3, #57	; 0x39
 8002878:	f108 0801 	add.w	r8, r8, #1
 800287c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8002880:	4645      	mov	r5, r8
 8002882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002886:	1e6a      	subs	r2, r5, #1
 8002888:	2b39      	cmp	r3, #57	; 0x39
 800288a:	d03a      	beq.n	8002902 <_dtoa_r+0xb62>
 800288c:	3301      	adds	r3, #1
 800288e:	e03f      	b.n	8002910 <_dtoa_r+0xb70>
 8002890:	2b00      	cmp	r3, #0
 8002892:	f108 0501 	add.w	r5, r8, #1
 8002896:	dd05      	ble.n	80028a4 <_dtoa_r+0xb04>
 8002898:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800289c:	d0eb      	beq.n	8002876 <_dtoa_r+0xad6>
 800289e:	f109 0901 	add.w	r9, r9, #1
 80028a2:	e707      	b.n	80026b4 <_dtoa_r+0x914>
 80028a4:	9b06      	ldr	r3, [sp, #24]
 80028a6:	9a04      	ldr	r2, [sp, #16]
 80028a8:	1aeb      	subs	r3, r5, r3
 80028aa:	4293      	cmp	r3, r2
 80028ac:	46a8      	mov	r8, r5
 80028ae:	f805 9c01 	strb.w	r9, [r5, #-1]
 80028b2:	d0a5      	beq.n	8002800 <_dtoa_r+0xa60>
 80028b4:	4651      	mov	r1, sl
 80028b6:	2300      	movs	r3, #0
 80028b8:	220a      	movs	r2, #10
 80028ba:	4620      	mov	r0, r4
 80028bc:	f000 f8b0 	bl	8002a20 <__multadd>
 80028c0:	9b07      	ldr	r3, [sp, #28]
 80028c2:	4682      	mov	sl, r0
 80028c4:	42bb      	cmp	r3, r7
 80028c6:	f04f 020a 	mov.w	r2, #10
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	9907      	ldr	r1, [sp, #28]
 80028d0:	4620      	mov	r0, r4
 80028d2:	d104      	bne.n	80028de <_dtoa_r+0xb3e>
 80028d4:	f000 f8a4 	bl	8002a20 <__multadd>
 80028d8:	9007      	str	r0, [sp, #28]
 80028da:	4607      	mov	r7, r0
 80028dc:	e6b1      	b.n	8002642 <_dtoa_r+0x8a2>
 80028de:	f000 f89f 	bl	8002a20 <__multadd>
 80028e2:	2300      	movs	r3, #0
 80028e4:	9007      	str	r0, [sp, #28]
 80028e6:	220a      	movs	r2, #10
 80028e8:	4639      	mov	r1, r7
 80028ea:	4620      	mov	r0, r4
 80028ec:	f000 f898 	bl	8002a20 <__multadd>
 80028f0:	e7f3      	b.n	80028da <_dtoa_r+0xb3a>
 80028f2:	4651      	mov	r1, sl
 80028f4:	2300      	movs	r3, #0
 80028f6:	220a      	movs	r2, #10
 80028f8:	4620      	mov	r0, r4
 80028fa:	f000 f891 	bl	8002a20 <__multadd>
 80028fe:	4682      	mov	sl, r0
 8002900:	e768      	b.n	80027d4 <_dtoa_r+0xa34>
 8002902:	9b06      	ldr	r3, [sp, #24]
 8002904:	4293      	cmp	r3, r2
 8002906:	d105      	bne.n	8002914 <_dtoa_r+0xb74>
 8002908:	2331      	movs	r3, #49	; 0x31
 800290a:	9a06      	ldr	r2, [sp, #24]
 800290c:	f10b 0b01 	add.w	fp, fp, #1
 8002910:	7013      	strb	r3, [r2, #0]
 8002912:	e73e      	b.n	8002792 <_dtoa_r+0x9f2>
 8002914:	4615      	mov	r5, r2
 8002916:	e7b4      	b.n	8002882 <_dtoa_r+0xae2>
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <_dtoa_r+0xba0>)
 800291a:	f7ff baa3 	b.w	8001e64 <_dtoa_r+0xc4>
 800291e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002920:	2b00      	cmp	r3, #0
 8002922:	f47f aa7d 	bne.w	8001e20 <_dtoa_r+0x80>
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <_dtoa_r+0xba4>)
 8002928:	f7ff ba9c 	b.w	8001e64 <_dtoa_r+0xc4>
 800292c:	9b04      	ldr	r3, [sp, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f73f af4f 	bgt.w	80027d2 <_dtoa_r+0xa32>
 8002934:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002936:	2b02      	cmp	r3, #2
 8002938:	f77f af4b 	ble.w	80027d2 <_dtoa_r+0xa32>
 800293c:	e714      	b.n	8002768 <_dtoa_r+0x9c8>
 800293e:	bf00      	nop
 8002940:	080031d0 	.word	0x080031d0
 8002944:	080031d2 	.word	0x080031d2

08002948 <_localeconv_r>:
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <_localeconv_r+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a18      	ldr	r0, [r3, #32]
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <_localeconv_r+0x18>)
 8002950:	2800      	cmp	r0, #0
 8002952:	bf08      	it	eq
 8002954:	4618      	moveq	r0, r3
 8002956:	30f0      	adds	r0, #240	; 0xf0
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000004 	.word	0x20000004
 8002960:	20000068 	.word	0x20000068

08002964 <malloc>:
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <malloc+0xc>)
 8002966:	4601      	mov	r1, r0
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	f000 baed 	b.w	8002f48 <_malloc_r>
 800296e:	bf00      	nop
 8002970:	20000004 	.word	0x20000004

08002974 <memcpy>:
 8002974:	b510      	push	{r4, lr}
 8002976:	1e43      	subs	r3, r0, #1
 8002978:	440a      	add	r2, r1
 800297a:	4291      	cmp	r1, r2
 800297c:	d100      	bne.n	8002980 <memcpy+0xc>
 800297e:	bd10      	pop	{r4, pc}
 8002980:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002984:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002988:	e7f7      	b.n	800297a <memcpy+0x6>

0800298a <_Balloc>:
 800298a:	b570      	push	{r4, r5, r6, lr}
 800298c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800298e:	4604      	mov	r4, r0
 8002990:	460e      	mov	r6, r1
 8002992:	b93d      	cbnz	r5, 80029a4 <_Balloc+0x1a>
 8002994:	2010      	movs	r0, #16
 8002996:	f7ff ffe5 	bl	8002964 <malloc>
 800299a:	6260      	str	r0, [r4, #36]	; 0x24
 800299c:	6045      	str	r5, [r0, #4]
 800299e:	6085      	str	r5, [r0, #8]
 80029a0:	6005      	str	r5, [r0, #0]
 80029a2:	60c5      	str	r5, [r0, #12]
 80029a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80029a6:	68eb      	ldr	r3, [r5, #12]
 80029a8:	b183      	cbz	r3, 80029cc <_Balloc+0x42>
 80029aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80029b2:	b9b8      	cbnz	r0, 80029e4 <_Balloc+0x5a>
 80029b4:	2101      	movs	r1, #1
 80029b6:	fa01 f506 	lsl.w	r5, r1, r6
 80029ba:	1d6a      	adds	r2, r5, #5
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	4620      	mov	r0, r4
 80029c0:	f000 fab3 	bl	8002f2a <_calloc_r>
 80029c4:	b160      	cbz	r0, 80029e0 <_Balloc+0x56>
 80029c6:	6046      	str	r6, [r0, #4]
 80029c8:	6085      	str	r5, [r0, #8]
 80029ca:	e00e      	b.n	80029ea <_Balloc+0x60>
 80029cc:	2221      	movs	r2, #33	; 0x21
 80029ce:	2104      	movs	r1, #4
 80029d0:	4620      	mov	r0, r4
 80029d2:	f000 faaa 	bl	8002f2a <_calloc_r>
 80029d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029d8:	60e8      	str	r0, [r5, #12]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e4      	bne.n	80029aa <_Balloc+0x20>
 80029e0:	2000      	movs	r0, #0
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
 80029e4:	6802      	ldr	r2, [r0, #0]
 80029e6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80029ea:	2300      	movs	r3, #0
 80029ec:	6103      	str	r3, [r0, #16]
 80029ee:	60c3      	str	r3, [r0, #12]
 80029f0:	bd70      	pop	{r4, r5, r6, pc}

080029f2 <_Bfree>:
 80029f2:	b570      	push	{r4, r5, r6, lr}
 80029f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80029f6:	4606      	mov	r6, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	b93c      	cbnz	r4, 8002a0c <_Bfree+0x1a>
 80029fc:	2010      	movs	r0, #16
 80029fe:	f7ff ffb1 	bl	8002964 <malloc>
 8002a02:	6270      	str	r0, [r6, #36]	; 0x24
 8002a04:	6044      	str	r4, [r0, #4]
 8002a06:	6084      	str	r4, [r0, #8]
 8002a08:	6004      	str	r4, [r0, #0]
 8002a0a:	60c4      	str	r4, [r0, #12]
 8002a0c:	b13d      	cbz	r5, 8002a1e <_Bfree+0x2c>
 8002a0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002a10:	686a      	ldr	r2, [r5, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a18:	6029      	str	r1, [r5, #0]
 8002a1a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}

08002a20 <__multadd>:
 8002a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a24:	461f      	mov	r7, r3
 8002a26:	4606      	mov	r6, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	690d      	ldr	r5, [r1, #16]
 8002a2e:	f101 0e14 	add.w	lr, r1, #20
 8002a32:	f8de 0000 	ldr.w	r0, [lr]
 8002a36:	3301      	adds	r3, #1
 8002a38:	b281      	uxth	r1, r0
 8002a3a:	fb02 7101 	mla	r1, r2, r1, r7
 8002a3e:	0c00      	lsrs	r0, r0, #16
 8002a40:	0c0f      	lsrs	r7, r1, #16
 8002a42:	fb02 7000 	mla	r0, r2, r0, r7
 8002a46:	b289      	uxth	r1, r1
 8002a48:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8002a4c:	429d      	cmp	r5, r3
 8002a4e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8002a52:	f84e 1b04 	str.w	r1, [lr], #4
 8002a56:	dcec      	bgt.n	8002a32 <__multadd+0x12>
 8002a58:	b1d7      	cbz	r7, 8002a90 <__multadd+0x70>
 8002a5a:	68a3      	ldr	r3, [r4, #8]
 8002a5c:	429d      	cmp	r5, r3
 8002a5e:	db12      	blt.n	8002a86 <__multadd+0x66>
 8002a60:	6861      	ldr	r1, [r4, #4]
 8002a62:	4630      	mov	r0, r6
 8002a64:	3101      	adds	r1, #1
 8002a66:	f7ff ff90 	bl	800298a <_Balloc>
 8002a6a:	4680      	mov	r8, r0
 8002a6c:	6922      	ldr	r2, [r4, #16]
 8002a6e:	f104 010c 	add.w	r1, r4, #12
 8002a72:	3202      	adds	r2, #2
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	300c      	adds	r0, #12
 8002a78:	f7ff ff7c 	bl	8002974 <memcpy>
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	4630      	mov	r0, r6
 8002a80:	f7ff ffb7 	bl	80029f2 <_Bfree>
 8002a84:	4644      	mov	r4, r8
 8002a86:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8002a8a:	3501      	adds	r5, #1
 8002a8c:	615f      	str	r7, [r3, #20]
 8002a8e:	6125      	str	r5, [r4, #16]
 8002a90:	4620      	mov	r0, r4
 8002a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a96 <__hi0bits>:
 8002a96:	0c02      	lsrs	r2, r0, #16
 8002a98:	0412      	lsls	r2, r2, #16
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	b9b2      	cbnz	r2, 8002acc <__hi0bits+0x36>
 8002a9e:	0403      	lsls	r3, r0, #16
 8002aa0:	2010      	movs	r0, #16
 8002aa2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8002aa6:	bf04      	itt	eq
 8002aa8:	021b      	lsleq	r3, r3, #8
 8002aaa:	3008      	addeq	r0, #8
 8002aac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8002ab0:	bf04      	itt	eq
 8002ab2:	011b      	lsleq	r3, r3, #4
 8002ab4:	3004      	addeq	r0, #4
 8002ab6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8002aba:	bf04      	itt	eq
 8002abc:	009b      	lsleq	r3, r3, #2
 8002abe:	3002      	addeq	r0, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db06      	blt.n	8002ad2 <__hi0bits+0x3c>
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	d503      	bpl.n	8002ad0 <__hi0bits+0x3a>
 8002ac8:	3001      	adds	r0, #1
 8002aca:	4770      	bx	lr
 8002acc:	2000      	movs	r0, #0
 8002ace:	e7e8      	b.n	8002aa2 <__hi0bits+0xc>
 8002ad0:	2020      	movs	r0, #32
 8002ad2:	4770      	bx	lr

08002ad4 <__lo0bits>:
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	f013 0207 	ands.w	r2, r3, #7
 8002adc:	d00b      	beq.n	8002af6 <__lo0bits+0x22>
 8002ade:	07da      	lsls	r2, r3, #31
 8002ae0:	d423      	bmi.n	8002b2a <__lo0bits+0x56>
 8002ae2:	0798      	lsls	r0, r3, #30
 8002ae4:	bf49      	itett	mi
 8002ae6:	085b      	lsrmi	r3, r3, #1
 8002ae8:	089b      	lsrpl	r3, r3, #2
 8002aea:	2001      	movmi	r0, #1
 8002aec:	600b      	strmi	r3, [r1, #0]
 8002aee:	bf5c      	itt	pl
 8002af0:	600b      	strpl	r3, [r1, #0]
 8002af2:	2002      	movpl	r0, #2
 8002af4:	4770      	bx	lr
 8002af6:	b298      	uxth	r0, r3
 8002af8:	b9a8      	cbnz	r0, 8002b26 <__lo0bits+0x52>
 8002afa:	2010      	movs	r0, #16
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002b02:	bf04      	itt	eq
 8002b04:	0a1b      	lsreq	r3, r3, #8
 8002b06:	3008      	addeq	r0, #8
 8002b08:	071a      	lsls	r2, r3, #28
 8002b0a:	bf04      	itt	eq
 8002b0c:	091b      	lsreq	r3, r3, #4
 8002b0e:	3004      	addeq	r0, #4
 8002b10:	079a      	lsls	r2, r3, #30
 8002b12:	bf04      	itt	eq
 8002b14:	089b      	lsreq	r3, r3, #2
 8002b16:	3002      	addeq	r0, #2
 8002b18:	07da      	lsls	r2, r3, #31
 8002b1a:	d402      	bmi.n	8002b22 <__lo0bits+0x4e>
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	d006      	beq.n	8002b2e <__lo0bits+0x5a>
 8002b20:	3001      	adds	r0, #1
 8002b22:	600b      	str	r3, [r1, #0]
 8002b24:	4770      	bx	lr
 8002b26:	4610      	mov	r0, r2
 8002b28:	e7e9      	b.n	8002afe <__lo0bits+0x2a>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	4770      	bx	lr
 8002b2e:	2020      	movs	r0, #32
 8002b30:	4770      	bx	lr

08002b32 <__i2b>:
 8002b32:	b510      	push	{r4, lr}
 8002b34:	460c      	mov	r4, r1
 8002b36:	2101      	movs	r1, #1
 8002b38:	f7ff ff27 	bl	800298a <_Balloc>
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	6144      	str	r4, [r0, #20]
 8002b40:	6102      	str	r2, [r0, #16]
 8002b42:	bd10      	pop	{r4, pc}

08002b44 <__multiply>:
 8002b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b48:	4614      	mov	r4, r2
 8002b4a:	690a      	ldr	r2, [r1, #16]
 8002b4c:	6923      	ldr	r3, [r4, #16]
 8002b4e:	4689      	mov	r9, r1
 8002b50:	429a      	cmp	r2, r3
 8002b52:	bfbe      	ittt	lt
 8002b54:	460b      	movlt	r3, r1
 8002b56:	46a1      	movlt	r9, r4
 8002b58:	461c      	movlt	r4, r3
 8002b5a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8002b5e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8002b62:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002b66:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002b6a:	eb07 060a 	add.w	r6, r7, sl
 8002b6e:	429e      	cmp	r6, r3
 8002b70:	bfc8      	it	gt
 8002b72:	3101      	addgt	r1, #1
 8002b74:	f7ff ff09 	bl	800298a <_Balloc>
 8002b78:	f100 0514 	add.w	r5, r0, #20
 8002b7c:	462b      	mov	r3, r5
 8002b7e:	2200      	movs	r2, #0
 8002b80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8002b84:	4543      	cmp	r3, r8
 8002b86:	d316      	bcc.n	8002bb6 <__multiply+0x72>
 8002b88:	f104 0214 	add.w	r2, r4, #20
 8002b8c:	f109 0114 	add.w	r1, r9, #20
 8002b90:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8002b94:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	9c01      	ldr	r4, [sp, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	4294      	cmp	r4, r2
 8002ba0:	d80c      	bhi.n	8002bbc <__multiply+0x78>
 8002ba2:	2e00      	cmp	r6, #0
 8002ba4:	dd03      	ble.n	8002bae <__multiply+0x6a>
 8002ba6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d054      	beq.n	8002c58 <__multiply+0x114>
 8002bae:	6106      	str	r6, [r0, #16]
 8002bb0:	b003      	add	sp, #12
 8002bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb6:	f843 2b04 	str.w	r2, [r3], #4
 8002bba:	e7e3      	b.n	8002b84 <__multiply+0x40>
 8002bbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8002bc0:	3204      	adds	r2, #4
 8002bc2:	f1ba 0f00 	cmp.w	sl, #0
 8002bc6:	d020      	beq.n	8002c0a <__multiply+0xc6>
 8002bc8:	46ae      	mov	lr, r5
 8002bca:	4689      	mov	r9, r1
 8002bcc:	f04f 0c00 	mov.w	ip, #0
 8002bd0:	f859 4b04 	ldr.w	r4, [r9], #4
 8002bd4:	f8be b000 	ldrh.w	fp, [lr]
 8002bd8:	b2a3      	uxth	r3, r4
 8002bda:	fb0a b303 	mla	r3, sl, r3, fp
 8002bde:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8002be2:	f8de 4000 	ldr.w	r4, [lr]
 8002be6:	4463      	add	r3, ip
 8002be8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002bec:	fb0a c40b 	mla	r4, sl, fp, ip
 8002bf0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002bfa:	454f      	cmp	r7, r9
 8002bfc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002c00:	f84e 3b04 	str.w	r3, [lr], #4
 8002c04:	d8e4      	bhi.n	8002bd0 <__multiply+0x8c>
 8002c06:	f8ce c000 	str.w	ip, [lr]
 8002c0a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8002c0e:	f1b9 0f00 	cmp.w	r9, #0
 8002c12:	d01f      	beq.n	8002c54 <__multiply+0x110>
 8002c14:	46ae      	mov	lr, r5
 8002c16:	468c      	mov	ip, r1
 8002c18:	f04f 0a00 	mov.w	sl, #0
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	f8bc 4000 	ldrh.w	r4, [ip]
 8002c22:	f8be b002 	ldrh.w	fp, [lr, #2]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	fb09 b404 	mla	r4, r9, r4, fp
 8002c2c:	44a2      	add	sl, r4
 8002c2e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8002c32:	f84e 3b04 	str.w	r3, [lr], #4
 8002c36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002c3a:	f8be 4000 	ldrh.w	r4, [lr]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	fb09 4303 	mla	r3, r9, r3, r4
 8002c44:	4567      	cmp	r7, ip
 8002c46:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8002c4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002c4e:	d8e6      	bhi.n	8002c1e <__multiply+0xda>
 8002c50:	f8ce 3000 	str.w	r3, [lr]
 8002c54:	3504      	adds	r5, #4
 8002c56:	e7a0      	b.n	8002b9a <__multiply+0x56>
 8002c58:	3e01      	subs	r6, #1
 8002c5a:	e7a2      	b.n	8002ba2 <__multiply+0x5e>

08002c5c <__pow5mult>:
 8002c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c60:	4615      	mov	r5, r2
 8002c62:	f012 0203 	ands.w	r2, r2, #3
 8002c66:	4606      	mov	r6, r0
 8002c68:	460f      	mov	r7, r1
 8002c6a:	d007      	beq.n	8002c7c <__pow5mult+0x20>
 8002c6c:	4c21      	ldr	r4, [pc, #132]	; (8002cf4 <__pow5mult+0x98>)
 8002c6e:	3a01      	subs	r2, #1
 8002c70:	2300      	movs	r3, #0
 8002c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002c76:	f7ff fed3 	bl	8002a20 <__multadd>
 8002c7a:	4607      	mov	r7, r0
 8002c7c:	10ad      	asrs	r5, r5, #2
 8002c7e:	d035      	beq.n	8002cec <__pow5mult+0x90>
 8002c80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8002c82:	b93c      	cbnz	r4, 8002c94 <__pow5mult+0x38>
 8002c84:	2010      	movs	r0, #16
 8002c86:	f7ff fe6d 	bl	8002964 <malloc>
 8002c8a:	6270      	str	r0, [r6, #36]	; 0x24
 8002c8c:	6044      	str	r4, [r0, #4]
 8002c8e:	6084      	str	r4, [r0, #8]
 8002c90:	6004      	str	r4, [r0, #0]
 8002c92:	60c4      	str	r4, [r0, #12]
 8002c94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8002c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8002c9c:	b94c      	cbnz	r4, 8002cb2 <__pow5mult+0x56>
 8002c9e:	f240 2171 	movw	r1, #625	; 0x271
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f7ff ff45 	bl	8002b32 <__i2b>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4604      	mov	r4, r0
 8002cac:	f8c8 0008 	str.w	r0, [r8, #8]
 8002cb0:	6003      	str	r3, [r0, #0]
 8002cb2:	f04f 0800 	mov.w	r8, #0
 8002cb6:	07eb      	lsls	r3, r5, #31
 8002cb8:	d50a      	bpl.n	8002cd0 <__pow5mult+0x74>
 8002cba:	4639      	mov	r1, r7
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f7ff ff40 	bl	8002b44 <__multiply>
 8002cc4:	4681      	mov	r9, r0
 8002cc6:	4639      	mov	r1, r7
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f7ff fe92 	bl	80029f2 <_Bfree>
 8002cce:	464f      	mov	r7, r9
 8002cd0:	106d      	asrs	r5, r5, #1
 8002cd2:	d00b      	beq.n	8002cec <__pow5mult+0x90>
 8002cd4:	6820      	ldr	r0, [r4, #0]
 8002cd6:	b938      	cbnz	r0, 8002ce8 <__pow5mult+0x8c>
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4621      	mov	r1, r4
 8002cdc:	4630      	mov	r0, r6
 8002cde:	f7ff ff31 	bl	8002b44 <__multiply>
 8002ce2:	6020      	str	r0, [r4, #0]
 8002ce4:	f8c0 8000 	str.w	r8, [r0]
 8002ce8:	4604      	mov	r4, r0
 8002cea:	e7e4      	b.n	8002cb6 <__pow5mult+0x5a>
 8002cec:	4638      	mov	r0, r7
 8002cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cf2:	bf00      	nop
 8002cf4:	080032d0 	.word	0x080032d0

08002cf8 <__lshift>:
 8002cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	4607      	mov	r7, r0
 8002d00:	4616      	mov	r6, r2
 8002d02:	6923      	ldr	r3, [r4, #16]
 8002d04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8002d08:	eb0a 0903 	add.w	r9, sl, r3
 8002d0c:	6849      	ldr	r1, [r1, #4]
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	f109 0501 	add.w	r5, r9, #1
 8002d14:	42ab      	cmp	r3, r5
 8002d16:	db31      	blt.n	8002d7c <__lshift+0x84>
 8002d18:	4638      	mov	r0, r7
 8002d1a:	f7ff fe36 	bl	800298a <_Balloc>
 8002d1e:	2200      	movs	r2, #0
 8002d20:	4680      	mov	r8, r0
 8002d22:	4611      	mov	r1, r2
 8002d24:	f100 0314 	add.w	r3, r0, #20
 8002d28:	4552      	cmp	r2, sl
 8002d2a:	db2a      	blt.n	8002d82 <__lshift+0x8a>
 8002d2c:	6920      	ldr	r0, [r4, #16]
 8002d2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002d32:	f104 0114 	add.w	r1, r4, #20
 8002d36:	f016 021f 	ands.w	r2, r6, #31
 8002d3a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8002d3e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8002d42:	d022      	beq.n	8002d8a <__lshift+0x92>
 8002d44:	2000      	movs	r0, #0
 8002d46:	f1c2 0c20 	rsb	ip, r2, #32
 8002d4a:	680e      	ldr	r6, [r1, #0]
 8002d4c:	4096      	lsls	r6, r2
 8002d4e:	4330      	orrs	r0, r6
 8002d50:	f843 0b04 	str.w	r0, [r3], #4
 8002d54:	f851 0b04 	ldr.w	r0, [r1], #4
 8002d58:	458e      	cmp	lr, r1
 8002d5a:	fa20 f00c 	lsr.w	r0, r0, ip
 8002d5e:	d8f4      	bhi.n	8002d4a <__lshift+0x52>
 8002d60:	6018      	str	r0, [r3, #0]
 8002d62:	b108      	cbz	r0, 8002d68 <__lshift+0x70>
 8002d64:	f109 0502 	add.w	r5, r9, #2
 8002d68:	3d01      	subs	r5, #1
 8002d6a:	4638      	mov	r0, r7
 8002d6c:	f8c8 5010 	str.w	r5, [r8, #16]
 8002d70:	4621      	mov	r1, r4
 8002d72:	f7ff fe3e 	bl	80029f2 <_Bfree>
 8002d76:	4640      	mov	r0, r8
 8002d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d7c:	3101      	adds	r1, #1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	e7c8      	b.n	8002d14 <__lshift+0x1c>
 8002d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002d86:	3201      	adds	r2, #1
 8002d88:	e7ce      	b.n	8002d28 <__lshift+0x30>
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	f851 2b04 	ldr.w	r2, [r1], #4
 8002d90:	458e      	cmp	lr, r1
 8002d92:	f843 2f04 	str.w	r2, [r3, #4]!
 8002d96:	d8f9      	bhi.n	8002d8c <__lshift+0x94>
 8002d98:	e7e6      	b.n	8002d68 <__lshift+0x70>

08002d9a <__mcmp>:
 8002d9a:	6903      	ldr	r3, [r0, #16]
 8002d9c:	690a      	ldr	r2, [r1, #16]
 8002d9e:	b530      	push	{r4, r5, lr}
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	d10c      	bne.n	8002dbe <__mcmp+0x24>
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	3014      	adds	r0, #20
 8002da8:	3114      	adds	r1, #20
 8002daa:	1884      	adds	r4, r0, r2
 8002dac:	4411      	add	r1, r2
 8002dae:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8002db2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8002db6:	4295      	cmp	r5, r2
 8002db8:	d003      	beq.n	8002dc2 <__mcmp+0x28>
 8002dba:	d305      	bcc.n	8002dc8 <__mcmp+0x2e>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	bd30      	pop	{r4, r5, pc}
 8002dc2:	42a0      	cmp	r0, r4
 8002dc4:	d3f3      	bcc.n	8002dae <__mcmp+0x14>
 8002dc6:	e7fa      	b.n	8002dbe <__mcmp+0x24>
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	e7f7      	b.n	8002dbe <__mcmp+0x24>

08002dce <__mdiff>:
 8002dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd2:	460d      	mov	r5, r1
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4628      	mov	r0, r5
 8002dda:	4614      	mov	r4, r2
 8002ddc:	f7ff ffdd 	bl	8002d9a <__mcmp>
 8002de0:	1e06      	subs	r6, r0, #0
 8002de2:	d108      	bne.n	8002df6 <__mdiff+0x28>
 8002de4:	4631      	mov	r1, r6
 8002de6:	4638      	mov	r0, r7
 8002de8:	f7ff fdcf 	bl	800298a <_Balloc>
 8002dec:	2301      	movs	r3, #1
 8002dee:	6146      	str	r6, [r0, #20]
 8002df0:	6103      	str	r3, [r0, #16]
 8002df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002df6:	bfa4      	itt	ge
 8002df8:	4623      	movge	r3, r4
 8002dfa:	462c      	movge	r4, r5
 8002dfc:	4638      	mov	r0, r7
 8002dfe:	6861      	ldr	r1, [r4, #4]
 8002e00:	bfa6      	itte	ge
 8002e02:	461d      	movge	r5, r3
 8002e04:	2600      	movge	r6, #0
 8002e06:	2601      	movlt	r6, #1
 8002e08:	f7ff fdbf 	bl	800298a <_Balloc>
 8002e0c:	f04f 0c00 	mov.w	ip, #0
 8002e10:	60c6      	str	r6, [r0, #12]
 8002e12:	692b      	ldr	r3, [r5, #16]
 8002e14:	6926      	ldr	r6, [r4, #16]
 8002e16:	f104 0214 	add.w	r2, r4, #20
 8002e1a:	f105 0914 	add.w	r9, r5, #20
 8002e1e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8002e22:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8002e26:	f100 0114 	add.w	r1, r0, #20
 8002e2a:	f852 ab04 	ldr.w	sl, [r2], #4
 8002e2e:	f859 5b04 	ldr.w	r5, [r9], #4
 8002e32:	fa1f f38a 	uxth.w	r3, sl
 8002e36:	4463      	add	r3, ip
 8002e38:	b2ac      	uxth	r4, r5
 8002e3a:	1b1b      	subs	r3, r3, r4
 8002e3c:	0c2c      	lsrs	r4, r5, #16
 8002e3e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8002e42:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8002e4c:	45c8      	cmp	r8, r9
 8002e4e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8002e52:	4696      	mov	lr, r2
 8002e54:	f841 4b04 	str.w	r4, [r1], #4
 8002e58:	d8e7      	bhi.n	8002e2a <__mdiff+0x5c>
 8002e5a:	45be      	cmp	lr, r7
 8002e5c:	d305      	bcc.n	8002e6a <__mdiff+0x9c>
 8002e5e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8002e62:	b18b      	cbz	r3, 8002e88 <__mdiff+0xba>
 8002e64:	6106      	str	r6, [r0, #16]
 8002e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8002e6e:	b2a2      	uxth	r2, r4
 8002e70:	4462      	add	r2, ip
 8002e72:	1413      	asrs	r3, r2, #16
 8002e74:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002e7e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8002e82:	f841 2b04 	str.w	r2, [r1], #4
 8002e86:	e7e8      	b.n	8002e5a <__mdiff+0x8c>
 8002e88:	3e01      	subs	r6, #1
 8002e8a:	e7e8      	b.n	8002e5e <__mdiff+0x90>

08002e8c <__d2b>:
 8002e8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e90:	461c      	mov	r4, r3
 8002e92:	2101      	movs	r1, #1
 8002e94:	4690      	mov	r8, r2
 8002e96:	9e08      	ldr	r6, [sp, #32]
 8002e98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002e9a:	f7ff fd76 	bl	800298a <_Balloc>
 8002e9e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8002ea2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8002ea6:	4607      	mov	r7, r0
 8002ea8:	bb34      	cbnz	r4, 8002ef8 <__d2b+0x6c>
 8002eaa:	9201      	str	r2, [sp, #4]
 8002eac:	f1b8 0f00 	cmp.w	r8, #0
 8002eb0:	d027      	beq.n	8002f02 <__d2b+0x76>
 8002eb2:	a802      	add	r0, sp, #8
 8002eb4:	f840 8d08 	str.w	r8, [r0, #-8]!
 8002eb8:	f7ff fe0c 	bl	8002ad4 <__lo0bits>
 8002ebc:	9900      	ldr	r1, [sp, #0]
 8002ebe:	b1f0      	cbz	r0, 8002efe <__d2b+0x72>
 8002ec0:	9a01      	ldr	r2, [sp, #4]
 8002ec2:	f1c0 0320 	rsb	r3, r0, #32
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	40c2      	lsrs	r2, r0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	9201      	str	r2, [sp, #4]
 8002ed2:	9b01      	ldr	r3, [sp, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2102      	movne	r1, #2
 8002eda:	2101      	moveq	r1, #1
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	6139      	str	r1, [r7, #16]
 8002ee0:	b1c4      	cbz	r4, 8002f14 <__d2b+0x88>
 8002ee2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8002ee6:	4404      	add	r4, r0
 8002ee8:	6034      	str	r4, [r6, #0]
 8002eea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8002eee:	6028      	str	r0, [r5, #0]
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	b002      	add	sp, #8
 8002ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ef8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002efc:	e7d5      	b.n	8002eaa <__d2b+0x1e>
 8002efe:	6179      	str	r1, [r7, #20]
 8002f00:	e7e7      	b.n	8002ed2 <__d2b+0x46>
 8002f02:	a801      	add	r0, sp, #4
 8002f04:	f7ff fde6 	bl	8002ad4 <__lo0bits>
 8002f08:	2101      	movs	r1, #1
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	6139      	str	r1, [r7, #16]
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	3020      	adds	r0, #32
 8002f12:	e7e5      	b.n	8002ee0 <__d2b+0x54>
 8002f14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8002f18:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8002f1c:	6030      	str	r0, [r6, #0]
 8002f1e:	6918      	ldr	r0, [r3, #16]
 8002f20:	f7ff fdb9 	bl	8002a96 <__hi0bits>
 8002f24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8002f28:	e7e1      	b.n	8002eee <__d2b+0x62>

08002f2a <_calloc_r>:
 8002f2a:	b538      	push	{r3, r4, r5, lr}
 8002f2c:	fb02 f401 	mul.w	r4, r2, r1
 8002f30:	4621      	mov	r1, r4
 8002f32:	f000 f809 	bl	8002f48 <_malloc_r>
 8002f36:	4605      	mov	r5, r0
 8002f38:	b118      	cbz	r0, 8002f42 <_calloc_r+0x18>
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f000 f883 	bl	8003048 <memset>
 8002f42:	4628      	mov	r0, r5
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
	...

08002f48 <_malloc_r>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	1ccd      	adds	r5, r1, #3
 8002f4c:	f025 0503 	bic.w	r5, r5, #3
 8002f50:	3508      	adds	r5, #8
 8002f52:	2d0c      	cmp	r5, #12
 8002f54:	bf38      	it	cc
 8002f56:	250c      	movcc	r5, #12
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	db01      	blt.n	8002f62 <_malloc_r+0x1a>
 8002f5e:	42a9      	cmp	r1, r5
 8002f60:	d903      	bls.n	8002f6a <_malloc_r+0x22>
 8002f62:	230c      	movs	r3, #12
 8002f64:	6033      	str	r3, [r6, #0]
 8002f66:	2000      	movs	r0, #0
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	f000 f875 	bl	8003058 <__malloc_lock>
 8002f6e:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <_malloc_r+0xb4>)
 8002f70:	6814      	ldr	r4, [r2, #0]
 8002f72:	4621      	mov	r1, r4
 8002f74:	b991      	cbnz	r1, 8002f9c <_malloc_r+0x54>
 8002f76:	4c22      	ldr	r4, [pc, #136]	; (8003000 <_malloc_r+0xb8>)
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	b91b      	cbnz	r3, 8002f84 <_malloc_r+0x3c>
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f000 f841 	bl	8003004 <_sbrk_r>
 8002f82:	6020      	str	r0, [r4, #0]
 8002f84:	4629      	mov	r1, r5
 8002f86:	4630      	mov	r0, r6
 8002f88:	f000 f83c 	bl	8003004 <_sbrk_r>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d126      	bne.n	8002fde <_malloc_r+0x96>
 8002f90:	230c      	movs	r3, #12
 8002f92:	4630      	mov	r0, r6
 8002f94:	6033      	str	r3, [r6, #0]
 8002f96:	f000 f860 	bl	800305a <__malloc_unlock>
 8002f9a:	e7e4      	b.n	8002f66 <_malloc_r+0x1e>
 8002f9c:	680b      	ldr	r3, [r1, #0]
 8002f9e:	1b5b      	subs	r3, r3, r5
 8002fa0:	d41a      	bmi.n	8002fd8 <_malloc_r+0x90>
 8002fa2:	2b0b      	cmp	r3, #11
 8002fa4:	d90f      	bls.n	8002fc6 <_malloc_r+0x7e>
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	18cc      	adds	r4, r1, r3
 8002faa:	50cd      	str	r5, [r1, r3]
 8002fac:	4630      	mov	r0, r6
 8002fae:	f000 f854 	bl	800305a <__malloc_unlock>
 8002fb2:	f104 000b 	add.w	r0, r4, #11
 8002fb6:	1d23      	adds	r3, r4, #4
 8002fb8:	f020 0007 	bic.w	r0, r0, #7
 8002fbc:	1ac3      	subs	r3, r0, r3
 8002fbe:	d01b      	beq.n	8002ff8 <_malloc_r+0xb0>
 8002fc0:	425a      	negs	r2, r3
 8002fc2:	50e2      	str	r2, [r4, r3]
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	428c      	cmp	r4, r1
 8002fc8:	bf0b      	itete	eq
 8002fca:	6863      	ldreq	r3, [r4, #4]
 8002fcc:	684b      	ldrne	r3, [r1, #4]
 8002fce:	6013      	streq	r3, [r2, #0]
 8002fd0:	6063      	strne	r3, [r4, #4]
 8002fd2:	bf18      	it	ne
 8002fd4:	460c      	movne	r4, r1
 8002fd6:	e7e9      	b.n	8002fac <_malloc_r+0x64>
 8002fd8:	460c      	mov	r4, r1
 8002fda:	6849      	ldr	r1, [r1, #4]
 8002fdc:	e7ca      	b.n	8002f74 <_malloc_r+0x2c>
 8002fde:	1cc4      	adds	r4, r0, #3
 8002fe0:	f024 0403 	bic.w	r4, r4, #3
 8002fe4:	42a0      	cmp	r0, r4
 8002fe6:	d005      	beq.n	8002ff4 <_malloc_r+0xac>
 8002fe8:	1a21      	subs	r1, r4, r0
 8002fea:	4630      	mov	r0, r6
 8002fec:	f000 f80a 	bl	8003004 <_sbrk_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d0cd      	beq.n	8002f90 <_malloc_r+0x48>
 8002ff4:	6025      	str	r5, [r4, #0]
 8002ff6:	e7d9      	b.n	8002fac <_malloc_r+0x64>
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200001fc 	.word	0x200001fc
 8003000:	20000200 	.word	0x20000200

08003004 <_sbrk_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	2300      	movs	r3, #0
 8003008:	4c05      	ldr	r4, [pc, #20]	; (8003020 <_sbrk_r+0x1c>)
 800300a:	4605      	mov	r5, r0
 800300c:	4608      	mov	r0, r1
 800300e:	6023      	str	r3, [r4, #0]
 8003010:	f7fe f8e2 	bl	80011d8 <_sbrk>
 8003014:	1c43      	adds	r3, r0, #1
 8003016:	d102      	bne.n	800301e <_sbrk_r+0x1a>
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	b103      	cbz	r3, 800301e <_sbrk_r+0x1a>
 800301c:	602b      	str	r3, [r5, #0]
 800301e:	bd38      	pop	{r3, r4, r5, pc}
 8003020:	2000020c 	.word	0x2000020c

08003024 <__ascii_mbtowc>:
 8003024:	b082      	sub	sp, #8
 8003026:	b901      	cbnz	r1, 800302a <__ascii_mbtowc+0x6>
 8003028:	a901      	add	r1, sp, #4
 800302a:	b142      	cbz	r2, 800303e <__ascii_mbtowc+0x1a>
 800302c:	b14b      	cbz	r3, 8003042 <__ascii_mbtowc+0x1e>
 800302e:	7813      	ldrb	r3, [r2, #0]
 8003030:	600b      	str	r3, [r1, #0]
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	1c10      	adds	r0, r2, #0
 8003036:	bf18      	it	ne
 8003038:	2001      	movne	r0, #1
 800303a:	b002      	add	sp, #8
 800303c:	4770      	bx	lr
 800303e:	4610      	mov	r0, r2
 8003040:	e7fb      	b.n	800303a <__ascii_mbtowc+0x16>
 8003042:	f06f 0001 	mvn.w	r0, #1
 8003046:	e7f8      	b.n	800303a <__ascii_mbtowc+0x16>

08003048 <memset>:
 8003048:	4603      	mov	r3, r0
 800304a:	4402      	add	r2, r0
 800304c:	4293      	cmp	r3, r2
 800304e:	d100      	bne.n	8003052 <memset+0xa>
 8003050:	4770      	bx	lr
 8003052:	f803 1b01 	strb.w	r1, [r3], #1
 8003056:	e7f9      	b.n	800304c <memset+0x4>

08003058 <__malloc_lock>:
 8003058:	4770      	bx	lr

0800305a <__malloc_unlock>:
 800305a:	4770      	bx	lr

0800305c <__ascii_wctomb>:
 800305c:	b149      	cbz	r1, 8003072 <__ascii_wctomb+0x16>
 800305e:	2aff      	cmp	r2, #255	; 0xff
 8003060:	bf8b      	itete	hi
 8003062:	238a      	movhi	r3, #138	; 0x8a
 8003064:	700a      	strbls	r2, [r1, #0]
 8003066:	6003      	strhi	r3, [r0, #0]
 8003068:	2001      	movls	r0, #1
 800306a:	bf88      	it	hi
 800306c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003070:	4770      	bx	lr
 8003072:	4608      	mov	r0, r1
 8003074:	4770      	bx	lr
	...

08003078 <_init>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr

08003084 <_fini>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr
